Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmts_opt
Rule 2     stmts_opt -> stmts
Rule 3     stmts_opt -> <empty>
Rule 4     stmts -> stmts stmt
Rule 5     stmts -> stmt
Rule 6     stmt -> ;
Rule 7     stmt -> { stmts }
Rule 8     id -> ID
Rule 9     lvalue -> id
Rule 10    lvalue -> id list
Rule 11    stmt -> lvalue = expr ;
Rule 12    stmt -> lvalue ADDASSIGN expr ;
Rule 13    stmt -> lvalue SUBASSIGN expr ;
Rule 14    stmt -> lvalue MULASSIGN expr ;
Rule 15    stmt -> lvalue DIVASSIGN expr ;
Rule 16    expr -> expr + expr
Rule 17    expr -> expr - expr
Rule 18    expr -> expr * expr
Rule 19    expr -> expr / expr
Rule 20    expr -> expr DOTADD expr
Rule 21    expr -> expr DOTSUB expr
Rule 22    expr -> expr DOTMUL expr
Rule 23    expr -> expr DOTDIV expr
Rule 24    expr -> FLOATNUM
Rule 25    expr -> INTNUM
Rule 26    expr -> id
Rule 27    expr -> STR
Rule 28    expr -> ( expr )
Rule 29    expr -> - expr
Rule 30    expr -> expr '
Rule 31    cond -> expr < expr
Rule 32    cond -> expr > expr
Rule 33    cond -> expr LE expr
Rule 34    cond -> expr GE expr
Rule 35    cond -> expr EQ expr
Rule 36    cond -> expr NEQ expr
Rule 37    expr -> [ lists ]
Rule 38    lists -> list
Rule 39    lists -> lists , list
Rule 40    list -> [ seq ]
Rule 41    seq -> expr
Rule 42    seq -> seq , expr
Rule 43    fun -> ZEROS
Rule 44    fun -> EYE
Rule 45    fun -> ONES
Rule 46    expr -> fun ( expr )
Rule 47    stmt -> WHILE ( cond ) stmt
Rule 48    stmt -> FOR id = expr : expr stmt
Rule 49    stmt -> IF ( cond ) stmt
Rule 50    stmt -> IF ( cond ) stmt ELSE stmt
Rule 51    stmt -> BREAK ;
Rule 52    stmt -> CONTINUE ;
Rule 53    stmt -> RETURN expr ;
Rule 54    stmt -> PRINT seq ;

Terminals, with rules where they appear

'                    : 30
(                    : 28 46 47 49 50
)                    : 28 46 47 49 50
*                    : 18
+                    : 16
,                    : 39 42
-                    : 17 29
/                    : 19
:                    : 48
;                    : 6 11 12 13 14 15 51 52 53 54
<                    : 31
=                    : 11 48
>                    : 32
ADDASSIGN            : 12
BREAK                : 51
CONTINUE             : 52
DIVASSIGN            : 15
DOTADD               : 20
DOTDIV               : 23
DOTMUL               : 22
DOTSUB               : 21
ELSE                 : 50
EQ                   : 35
EYE                  : 44
FLOATNUM             : 24
FOR                  : 48
GE                   : 34
ID                   : 8
IF                   : 49 50
INTNUM               : 25
LE                   : 33
MULASSIGN            : 14
NEQ                  : 36
ONES                 : 45
PRINT                : 54
RETURN               : 53
STR                  : 27
SUBASSIGN            : 13
WHILE                : 47
ZEROS                : 43
[                    : 37 40
]                    : 37 40
error                : 
{                    : 7
}                    : 7

Nonterminals, with rules where they appear

cond                 : 47 49 50
expr                 : 11 12 13 14 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 28 29 30 31 31 32 32 33 33 34 34 35 35 36 36 41 42 46 48 48 53
fun                  : 46
id                   : 9 10 26 48
list                 : 10 38 39
lists                : 37 39
lvalue               : 11 12 13 14 15
program              : 0
seq                  : 40 42 54
stmt                 : 4 5 47 48 49 50 50
stmts                : 2 4 7
stmts_opt            : 1

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmts_opt
    (2) stmts_opt -> . stmts
    (3) stmts_opt -> .
    (4) stmts -> . stmts stmt
    (5) stmts -> . stmt
    (6) stmt -> . ;
    (7) stmt -> . { stmts }
    (11) stmt -> . lvalue = expr ;
    (12) stmt -> . lvalue ADDASSIGN expr ;
    (13) stmt -> . lvalue SUBASSIGN expr ;
    (14) stmt -> . lvalue MULASSIGN expr ;
    (15) stmt -> . lvalue DIVASSIGN expr ;
    (47) stmt -> . WHILE ( cond ) stmt
    (48) stmt -> . FOR id = expr : expr stmt
    (49) stmt -> . IF ( cond ) stmt
    (50) stmt -> . IF ( cond ) stmt ELSE stmt
    (51) stmt -> . BREAK ;
    (52) stmt -> . CONTINUE ;
    (53) stmt -> . RETURN expr ;
    (54) stmt -> . PRINT seq ;
    (9) lvalue -> . id
    (10) lvalue -> . id list
    (8) id -> . ID

    $end            reduce using rule 3 (stmts_opt -> .)
    ;               shift and go to state 5
    {               shift and go to state 6
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    RETURN          shift and go to state 14
    PRINT           shift and go to state 15
    ID              shift and go to state 16

    program                        shift and go to state 1
    stmts_opt                      shift and go to state 2
    stmts                          shift and go to state 3
    stmt                           shift and go to state 4
    lvalue                         shift and go to state 7
    id                             shift and go to state 10

state 1

    (0) S' -> program .



state 2

    (1) program -> stmts_opt .

    $end            reduce using rule 1 (program -> stmts_opt .)


state 3

    (2) stmts_opt -> stmts .
    (4) stmts -> stmts . stmt
    (6) stmt -> . ;
    (7) stmt -> . { stmts }
    (11) stmt -> . lvalue = expr ;
    (12) stmt -> . lvalue ADDASSIGN expr ;
    (13) stmt -> . lvalue SUBASSIGN expr ;
    (14) stmt -> . lvalue MULASSIGN expr ;
    (15) stmt -> . lvalue DIVASSIGN expr ;
    (47) stmt -> . WHILE ( cond ) stmt
    (48) stmt -> . FOR id = expr : expr stmt
    (49) stmt -> . IF ( cond ) stmt
    (50) stmt -> . IF ( cond ) stmt ELSE stmt
    (51) stmt -> . BREAK ;
    (52) stmt -> . CONTINUE ;
    (53) stmt -> . RETURN expr ;
    (54) stmt -> . PRINT seq ;
    (9) lvalue -> . id
    (10) lvalue -> . id list
    (8) id -> . ID

    $end            reduce using rule 2 (stmts_opt -> stmts .)
    ;               shift and go to state 5
    {               shift and go to state 6
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    RETURN          shift and go to state 14
    PRINT           shift and go to state 15
    ID              shift and go to state 16

    stmt                           shift and go to state 17
    lvalue                         shift and go to state 7
    id                             shift and go to state 10

state 4

    (5) stmts -> stmt .

    ;               reduce using rule 5 (stmts -> stmt .)
    {               reduce using rule 5 (stmts -> stmt .)
    WHILE           reduce using rule 5 (stmts -> stmt .)
    FOR             reduce using rule 5 (stmts -> stmt .)
    IF              reduce using rule 5 (stmts -> stmt .)
    BREAK           reduce using rule 5 (stmts -> stmt .)
    CONTINUE        reduce using rule 5 (stmts -> stmt .)
    RETURN          reduce using rule 5 (stmts -> stmt .)
    PRINT           reduce using rule 5 (stmts -> stmt .)
    ID              reduce using rule 5 (stmts -> stmt .)
    $end            reduce using rule 5 (stmts -> stmt .)
    }               reduce using rule 5 (stmts -> stmt .)


state 5

    (6) stmt -> ; .

    ;               reduce using rule 6 (stmt -> ; .)
    {               reduce using rule 6 (stmt -> ; .)
    WHILE           reduce using rule 6 (stmt -> ; .)
    FOR             reduce using rule 6 (stmt -> ; .)
    IF              reduce using rule 6 (stmt -> ; .)
    BREAK           reduce using rule 6 (stmt -> ; .)
    CONTINUE        reduce using rule 6 (stmt -> ; .)
    RETURN          reduce using rule 6 (stmt -> ; .)
    PRINT           reduce using rule 6 (stmt -> ; .)
    ID              reduce using rule 6 (stmt -> ; .)
    $end            reduce using rule 6 (stmt -> ; .)
    }               reduce using rule 6 (stmt -> ; .)
    ELSE            reduce using rule 6 (stmt -> ; .)


state 6

    (7) stmt -> { . stmts }
    (4) stmts -> . stmts stmt
    (5) stmts -> . stmt
    (6) stmt -> . ;
    (7) stmt -> . { stmts }
    (11) stmt -> . lvalue = expr ;
    (12) stmt -> . lvalue ADDASSIGN expr ;
    (13) stmt -> . lvalue SUBASSIGN expr ;
    (14) stmt -> . lvalue MULASSIGN expr ;
    (15) stmt -> . lvalue DIVASSIGN expr ;
    (47) stmt -> . WHILE ( cond ) stmt
    (48) stmt -> . FOR id = expr : expr stmt
    (49) stmt -> . IF ( cond ) stmt
    (50) stmt -> . IF ( cond ) stmt ELSE stmt
    (51) stmt -> . BREAK ;
    (52) stmt -> . CONTINUE ;
    (53) stmt -> . RETURN expr ;
    (54) stmt -> . PRINT seq ;
    (9) lvalue -> . id
    (10) lvalue -> . id list
    (8) id -> . ID

    ;               shift and go to state 5
    {               shift and go to state 6
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    RETURN          shift and go to state 14
    PRINT           shift and go to state 15
    ID              shift and go to state 16

    stmts                          shift and go to state 18
    stmt                           shift and go to state 4
    lvalue                         shift and go to state 7
    id                             shift and go to state 10

state 7

    (11) stmt -> lvalue . = expr ;
    (12) stmt -> lvalue . ADDASSIGN expr ;
    (13) stmt -> lvalue . SUBASSIGN expr ;
    (14) stmt -> lvalue . MULASSIGN expr ;
    (15) stmt -> lvalue . DIVASSIGN expr ;

    =               shift and go to state 19
    ADDASSIGN       shift and go to state 20
    SUBASSIGN       shift and go to state 21
    MULASSIGN       shift and go to state 22
    DIVASSIGN       shift and go to state 23


state 8

    (47) stmt -> WHILE . ( cond ) stmt

    (               shift and go to state 24


state 9

    (48) stmt -> FOR . id = expr : expr stmt
    (8) id -> . ID

    ID              shift and go to state 16

    id                             shift and go to state 25

state 10

    (9) lvalue -> id .
    (10) lvalue -> id . list
    (40) list -> . [ seq ]

    =               reduce using rule 9 (lvalue -> id .)
    ADDASSIGN       reduce using rule 9 (lvalue -> id .)
    SUBASSIGN       reduce using rule 9 (lvalue -> id .)
    MULASSIGN       reduce using rule 9 (lvalue -> id .)
    DIVASSIGN       reduce using rule 9 (lvalue -> id .)
    [               shift and go to state 27

    list                           shift and go to state 26

state 11

    (49) stmt -> IF . ( cond ) stmt
    (50) stmt -> IF . ( cond ) stmt ELSE stmt

    (               shift and go to state 28


state 12

    (51) stmt -> BREAK . ;

    ;               shift and go to state 29


state 13

    (52) stmt -> CONTINUE . ;

    ;               shift and go to state 30


state 14

    (53) stmt -> RETURN . expr ;
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    expr                           shift and go to state 31
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 15

    (54) stmt -> PRINT . seq ;
    (41) seq -> . expr
    (42) seq -> . seq , expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    seq                            shift and go to state 43
    expr                           shift and go to state 44
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 16

    (8) id -> ID .

    [               reduce using rule 8 (id -> ID .)
    =               reduce using rule 8 (id -> ID .)
    ADDASSIGN       reduce using rule 8 (id -> ID .)
    SUBASSIGN       reduce using rule 8 (id -> ID .)
    MULASSIGN       reduce using rule 8 (id -> ID .)
    DIVASSIGN       reduce using rule 8 (id -> ID .)
    ;               reduce using rule 8 (id -> ID .)
    +               reduce using rule 8 (id -> ID .)
    -               reduce using rule 8 (id -> ID .)
    *               reduce using rule 8 (id -> ID .)
    /               reduce using rule 8 (id -> ID .)
    DOTADD          reduce using rule 8 (id -> ID .)
    DOTSUB          reduce using rule 8 (id -> ID .)
    DOTMUL          reduce using rule 8 (id -> ID .)
    DOTDIV          reduce using rule 8 (id -> ID .)
    '               reduce using rule 8 (id -> ID .)
    ,               reduce using rule 8 (id -> ID .)
    <               reduce using rule 8 (id -> ID .)
    >               reduce using rule 8 (id -> ID .)
    LE              reduce using rule 8 (id -> ID .)
    GE              reduce using rule 8 (id -> ID .)
    EQ              reduce using rule 8 (id -> ID .)
    NEQ             reduce using rule 8 (id -> ID .)
    ]               reduce using rule 8 (id -> ID .)
    )               reduce using rule 8 (id -> ID .)
    :               reduce using rule 8 (id -> ID .)
    {               reduce using rule 8 (id -> ID .)
    WHILE           reduce using rule 8 (id -> ID .)
    FOR             reduce using rule 8 (id -> ID .)
    IF              reduce using rule 8 (id -> ID .)
    BREAK           reduce using rule 8 (id -> ID .)
    CONTINUE        reduce using rule 8 (id -> ID .)
    RETURN          reduce using rule 8 (id -> ID .)
    PRINT           reduce using rule 8 (id -> ID .)
    ID              reduce using rule 8 (id -> ID .)


state 17

    (4) stmts -> stmts stmt .

    ;               reduce using rule 4 (stmts -> stmts stmt .)
    {               reduce using rule 4 (stmts -> stmts stmt .)
    WHILE           reduce using rule 4 (stmts -> stmts stmt .)
    FOR             reduce using rule 4 (stmts -> stmts stmt .)
    IF              reduce using rule 4 (stmts -> stmts stmt .)
    BREAK           reduce using rule 4 (stmts -> stmts stmt .)
    CONTINUE        reduce using rule 4 (stmts -> stmts stmt .)
    RETURN          reduce using rule 4 (stmts -> stmts stmt .)
    PRINT           reduce using rule 4 (stmts -> stmts stmt .)
    ID              reduce using rule 4 (stmts -> stmts stmt .)
    $end            reduce using rule 4 (stmts -> stmts stmt .)
    }               reduce using rule 4 (stmts -> stmts stmt .)


state 18

    (7) stmt -> { stmts . }
    (4) stmts -> stmts . stmt
    (6) stmt -> . ;
    (7) stmt -> . { stmts }
    (11) stmt -> . lvalue = expr ;
    (12) stmt -> . lvalue ADDASSIGN expr ;
    (13) stmt -> . lvalue SUBASSIGN expr ;
    (14) stmt -> . lvalue MULASSIGN expr ;
    (15) stmt -> . lvalue DIVASSIGN expr ;
    (47) stmt -> . WHILE ( cond ) stmt
    (48) stmt -> . FOR id = expr : expr stmt
    (49) stmt -> . IF ( cond ) stmt
    (50) stmt -> . IF ( cond ) stmt ELSE stmt
    (51) stmt -> . BREAK ;
    (52) stmt -> . CONTINUE ;
    (53) stmt -> . RETURN expr ;
    (54) stmt -> . PRINT seq ;
    (9) lvalue -> . id
    (10) lvalue -> . id list
    (8) id -> . ID

    }               shift and go to state 45
    ;               shift and go to state 5
    {               shift and go to state 6
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    RETURN          shift and go to state 14
    PRINT           shift and go to state 15
    ID              shift and go to state 16

    stmt                           shift and go to state 17
    lvalue                         shift and go to state 7
    id                             shift and go to state 10

state 19

    (11) stmt -> lvalue = . expr ;
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    expr                           shift and go to state 46
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 20

    (12) stmt -> lvalue ADDASSIGN . expr ;
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    expr                           shift and go to state 47
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 21

    (13) stmt -> lvalue SUBASSIGN . expr ;
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    expr                           shift and go to state 48
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 22

    (14) stmt -> lvalue MULASSIGN . expr ;
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    expr                           shift and go to state 49
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 23

    (15) stmt -> lvalue DIVASSIGN . expr ;
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    expr                           shift and go to state 50
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 24

    (47) stmt -> WHILE ( . cond ) stmt
    (31) cond -> . expr < expr
    (32) cond -> . expr > expr
    (33) cond -> . expr LE expr
    (34) cond -> . expr GE expr
    (35) cond -> . expr EQ expr
    (36) cond -> . expr NEQ expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    cond                           shift and go to state 51
    expr                           shift and go to state 52
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 25

    (48) stmt -> FOR id . = expr : expr stmt

    =               shift and go to state 53


state 26

    (10) lvalue -> id list .

    =               reduce using rule 10 (lvalue -> id list .)
    ADDASSIGN       reduce using rule 10 (lvalue -> id list .)
    SUBASSIGN       reduce using rule 10 (lvalue -> id list .)
    MULASSIGN       reduce using rule 10 (lvalue -> id list .)
    DIVASSIGN       reduce using rule 10 (lvalue -> id list .)


state 27

    (40) list -> [ . seq ]
    (41) seq -> . expr
    (42) seq -> . seq , expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    seq                            shift and go to state 54
    expr                           shift and go to state 44
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 28

    (49) stmt -> IF ( . cond ) stmt
    (50) stmt -> IF ( . cond ) stmt ELSE stmt
    (31) cond -> . expr < expr
    (32) cond -> . expr > expr
    (33) cond -> . expr LE expr
    (34) cond -> . expr GE expr
    (35) cond -> . expr EQ expr
    (36) cond -> . expr NEQ expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    cond                           shift and go to state 55
    expr                           shift and go to state 52
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 29

    (51) stmt -> BREAK ; .

    ;               reduce using rule 51 (stmt -> BREAK ; .)
    {               reduce using rule 51 (stmt -> BREAK ; .)
    WHILE           reduce using rule 51 (stmt -> BREAK ; .)
    FOR             reduce using rule 51 (stmt -> BREAK ; .)
    IF              reduce using rule 51 (stmt -> BREAK ; .)
    BREAK           reduce using rule 51 (stmt -> BREAK ; .)
    CONTINUE        reduce using rule 51 (stmt -> BREAK ; .)
    RETURN          reduce using rule 51 (stmt -> BREAK ; .)
    PRINT           reduce using rule 51 (stmt -> BREAK ; .)
    ID              reduce using rule 51 (stmt -> BREAK ; .)
    $end            reduce using rule 51 (stmt -> BREAK ; .)
    }               reduce using rule 51 (stmt -> BREAK ; .)
    ELSE            reduce using rule 51 (stmt -> BREAK ; .)


state 30

    (52) stmt -> CONTINUE ; .

    ;               reduce using rule 52 (stmt -> CONTINUE ; .)
    {               reduce using rule 52 (stmt -> CONTINUE ; .)
    WHILE           reduce using rule 52 (stmt -> CONTINUE ; .)
    FOR             reduce using rule 52 (stmt -> CONTINUE ; .)
    IF              reduce using rule 52 (stmt -> CONTINUE ; .)
    BREAK           reduce using rule 52 (stmt -> CONTINUE ; .)
    CONTINUE        reduce using rule 52 (stmt -> CONTINUE ; .)
    RETURN          reduce using rule 52 (stmt -> CONTINUE ; .)
    PRINT           reduce using rule 52 (stmt -> CONTINUE ; .)
    ID              reduce using rule 52 (stmt -> CONTINUE ; .)
    $end            reduce using rule 52 (stmt -> CONTINUE ; .)
    }               reduce using rule 52 (stmt -> CONTINUE ; .)
    ELSE            reduce using rule 52 (stmt -> CONTINUE ; .)


state 31

    (53) stmt -> RETURN expr . ;
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    ;               shift and go to state 56
    +               shift and go to state 57
    -               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTSUB          shift and go to state 62
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65


state 32

    (29) expr -> - . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    expr                           shift and go to state 66
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 33

    (24) expr -> FLOATNUM .

    ;               reduce using rule 24 (expr -> FLOATNUM .)
    +               reduce using rule 24 (expr -> FLOATNUM .)
    -               reduce using rule 24 (expr -> FLOATNUM .)
    *               reduce using rule 24 (expr -> FLOATNUM .)
    /               reduce using rule 24 (expr -> FLOATNUM .)
    DOTADD          reduce using rule 24 (expr -> FLOATNUM .)
    DOTSUB          reduce using rule 24 (expr -> FLOATNUM .)
    DOTMUL          reduce using rule 24 (expr -> FLOATNUM .)
    DOTDIV          reduce using rule 24 (expr -> FLOATNUM .)
    '               reduce using rule 24 (expr -> FLOATNUM .)
    ,               reduce using rule 24 (expr -> FLOATNUM .)
    <               reduce using rule 24 (expr -> FLOATNUM .)
    >               reduce using rule 24 (expr -> FLOATNUM .)
    LE              reduce using rule 24 (expr -> FLOATNUM .)
    GE              reduce using rule 24 (expr -> FLOATNUM .)
    EQ              reduce using rule 24 (expr -> FLOATNUM .)
    NEQ             reduce using rule 24 (expr -> FLOATNUM .)
    ]               reduce using rule 24 (expr -> FLOATNUM .)
    )               reduce using rule 24 (expr -> FLOATNUM .)
    :               reduce using rule 24 (expr -> FLOATNUM .)
    {               reduce using rule 24 (expr -> FLOATNUM .)
    WHILE           reduce using rule 24 (expr -> FLOATNUM .)
    FOR             reduce using rule 24 (expr -> FLOATNUM .)
    IF              reduce using rule 24 (expr -> FLOATNUM .)
    BREAK           reduce using rule 24 (expr -> FLOATNUM .)
    CONTINUE        reduce using rule 24 (expr -> FLOATNUM .)
    RETURN          reduce using rule 24 (expr -> FLOATNUM .)
    PRINT           reduce using rule 24 (expr -> FLOATNUM .)
    ID              reduce using rule 24 (expr -> FLOATNUM .)


state 34

    (25) expr -> INTNUM .

    ;               reduce using rule 25 (expr -> INTNUM .)
    +               reduce using rule 25 (expr -> INTNUM .)
    -               reduce using rule 25 (expr -> INTNUM .)
    *               reduce using rule 25 (expr -> INTNUM .)
    /               reduce using rule 25 (expr -> INTNUM .)
    DOTADD          reduce using rule 25 (expr -> INTNUM .)
    DOTSUB          reduce using rule 25 (expr -> INTNUM .)
    DOTMUL          reduce using rule 25 (expr -> INTNUM .)
    DOTDIV          reduce using rule 25 (expr -> INTNUM .)
    '               reduce using rule 25 (expr -> INTNUM .)
    ,               reduce using rule 25 (expr -> INTNUM .)
    <               reduce using rule 25 (expr -> INTNUM .)
    >               reduce using rule 25 (expr -> INTNUM .)
    LE              reduce using rule 25 (expr -> INTNUM .)
    GE              reduce using rule 25 (expr -> INTNUM .)
    EQ              reduce using rule 25 (expr -> INTNUM .)
    NEQ             reduce using rule 25 (expr -> INTNUM .)
    ]               reduce using rule 25 (expr -> INTNUM .)
    )               reduce using rule 25 (expr -> INTNUM .)
    :               reduce using rule 25 (expr -> INTNUM .)
    {               reduce using rule 25 (expr -> INTNUM .)
    WHILE           reduce using rule 25 (expr -> INTNUM .)
    FOR             reduce using rule 25 (expr -> INTNUM .)
    IF              reduce using rule 25 (expr -> INTNUM .)
    BREAK           reduce using rule 25 (expr -> INTNUM .)
    CONTINUE        reduce using rule 25 (expr -> INTNUM .)
    RETURN          reduce using rule 25 (expr -> INTNUM .)
    PRINT           reduce using rule 25 (expr -> INTNUM .)
    ID              reduce using rule 25 (expr -> INTNUM .)


state 35

    (26) expr -> id .

    ;               reduce using rule 26 (expr -> id .)
    +               reduce using rule 26 (expr -> id .)
    -               reduce using rule 26 (expr -> id .)
    *               reduce using rule 26 (expr -> id .)
    /               reduce using rule 26 (expr -> id .)
    DOTADD          reduce using rule 26 (expr -> id .)
    DOTSUB          reduce using rule 26 (expr -> id .)
    DOTMUL          reduce using rule 26 (expr -> id .)
    DOTDIV          reduce using rule 26 (expr -> id .)
    '               reduce using rule 26 (expr -> id .)
    ,               reduce using rule 26 (expr -> id .)
    <               reduce using rule 26 (expr -> id .)
    >               reduce using rule 26 (expr -> id .)
    LE              reduce using rule 26 (expr -> id .)
    GE              reduce using rule 26 (expr -> id .)
    EQ              reduce using rule 26 (expr -> id .)
    NEQ             reduce using rule 26 (expr -> id .)
    ]               reduce using rule 26 (expr -> id .)
    )               reduce using rule 26 (expr -> id .)
    :               reduce using rule 26 (expr -> id .)
    {               reduce using rule 26 (expr -> id .)
    WHILE           reduce using rule 26 (expr -> id .)
    FOR             reduce using rule 26 (expr -> id .)
    IF              reduce using rule 26 (expr -> id .)
    BREAK           reduce using rule 26 (expr -> id .)
    CONTINUE        reduce using rule 26 (expr -> id .)
    RETURN          reduce using rule 26 (expr -> id .)
    PRINT           reduce using rule 26 (expr -> id .)
    ID              reduce using rule 26 (expr -> id .)


state 36

    (27) expr -> STR .

    ;               reduce using rule 27 (expr -> STR .)
    +               reduce using rule 27 (expr -> STR .)
    -               reduce using rule 27 (expr -> STR .)
    *               reduce using rule 27 (expr -> STR .)
    /               reduce using rule 27 (expr -> STR .)
    DOTADD          reduce using rule 27 (expr -> STR .)
    DOTSUB          reduce using rule 27 (expr -> STR .)
    DOTMUL          reduce using rule 27 (expr -> STR .)
    DOTDIV          reduce using rule 27 (expr -> STR .)
    '               reduce using rule 27 (expr -> STR .)
    ,               reduce using rule 27 (expr -> STR .)
    <               reduce using rule 27 (expr -> STR .)
    >               reduce using rule 27 (expr -> STR .)
    LE              reduce using rule 27 (expr -> STR .)
    GE              reduce using rule 27 (expr -> STR .)
    EQ              reduce using rule 27 (expr -> STR .)
    NEQ             reduce using rule 27 (expr -> STR .)
    ]               reduce using rule 27 (expr -> STR .)
    )               reduce using rule 27 (expr -> STR .)
    :               reduce using rule 27 (expr -> STR .)
    {               reduce using rule 27 (expr -> STR .)
    WHILE           reduce using rule 27 (expr -> STR .)
    FOR             reduce using rule 27 (expr -> STR .)
    IF              reduce using rule 27 (expr -> STR .)
    BREAK           reduce using rule 27 (expr -> STR .)
    CONTINUE        reduce using rule 27 (expr -> STR .)
    RETURN          reduce using rule 27 (expr -> STR .)
    PRINT           reduce using rule 27 (expr -> STR .)
    ID              reduce using rule 27 (expr -> STR .)


state 37

    (28) expr -> ( . expr )
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    expr                           shift and go to state 67
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 38

    (37) expr -> [ . lists ]
    (38) lists -> . list
    (39) lists -> . lists , list
    (40) list -> . [ seq ]

    [               shift and go to state 27

    lists                          shift and go to state 68
    list                           shift and go to state 69

state 39

    (46) expr -> fun . ( expr )

    (               shift and go to state 70


state 40

    (43) fun -> ZEROS .

    (               reduce using rule 43 (fun -> ZEROS .)


state 41

    (44) fun -> EYE .

    (               reduce using rule 44 (fun -> EYE .)


state 42

    (45) fun -> ONES .

    (               reduce using rule 45 (fun -> ONES .)


state 43

    (54) stmt -> PRINT seq . ;
    (42) seq -> seq . , expr

    ;               shift and go to state 71
    ,               shift and go to state 72


state 44

    (41) seq -> expr .
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    ;               reduce using rule 41 (seq -> expr .)
    ,               reduce using rule 41 (seq -> expr .)
    ]               reduce using rule 41 (seq -> expr .)
    +               shift and go to state 57
    -               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTSUB          shift and go to state 62
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65


state 45

    (7) stmt -> { stmts } .

    ;               reduce using rule 7 (stmt -> { stmts } .)
    {               reduce using rule 7 (stmt -> { stmts } .)
    WHILE           reduce using rule 7 (stmt -> { stmts } .)
    FOR             reduce using rule 7 (stmt -> { stmts } .)
    IF              reduce using rule 7 (stmt -> { stmts } .)
    BREAK           reduce using rule 7 (stmt -> { stmts } .)
    CONTINUE        reduce using rule 7 (stmt -> { stmts } .)
    RETURN          reduce using rule 7 (stmt -> { stmts } .)
    PRINT           reduce using rule 7 (stmt -> { stmts } .)
    ID              reduce using rule 7 (stmt -> { stmts } .)
    $end            reduce using rule 7 (stmt -> { stmts } .)
    }               reduce using rule 7 (stmt -> { stmts } .)
    ELSE            reduce using rule 7 (stmt -> { stmts } .)


state 46

    (11) stmt -> lvalue = expr . ;
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    ;               shift and go to state 73
    +               shift and go to state 57
    -               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTSUB          shift and go to state 62
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65


state 47

    (12) stmt -> lvalue ADDASSIGN expr . ;
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    ;               shift and go to state 74
    +               shift and go to state 57
    -               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTSUB          shift and go to state 62
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65


state 48

    (13) stmt -> lvalue SUBASSIGN expr . ;
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    ;               shift and go to state 75
    +               shift and go to state 57
    -               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTSUB          shift and go to state 62
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65


state 49

    (14) stmt -> lvalue MULASSIGN expr . ;
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    ;               shift and go to state 76
    +               shift and go to state 57
    -               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTSUB          shift and go to state 62
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65


state 50

    (15) stmt -> lvalue DIVASSIGN expr . ;
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    ;               shift and go to state 77
    +               shift and go to state 57
    -               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTSUB          shift and go to state 62
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65


state 51

    (47) stmt -> WHILE ( cond . ) stmt

    )               shift and go to state 78


state 52

    (31) cond -> expr . < expr
    (32) cond -> expr . > expr
    (33) cond -> expr . LE expr
    (34) cond -> expr . GE expr
    (35) cond -> expr . EQ expr
    (36) cond -> expr . NEQ expr
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    <               shift and go to state 79
    >               shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    EQ              shift and go to state 83
    NEQ             shift and go to state 84
    +               shift and go to state 57
    -               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTSUB          shift and go to state 62
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65


state 53

    (48) stmt -> FOR id = . expr : expr stmt
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    id                             shift and go to state 35
    expr                           shift and go to state 85
    fun                            shift and go to state 39

state 54

    (40) list -> [ seq . ]
    (42) seq -> seq . , expr

    ]               shift and go to state 86
    ,               shift and go to state 72


state 55

    (49) stmt -> IF ( cond . ) stmt
    (50) stmt -> IF ( cond . ) stmt ELSE stmt

    )               shift and go to state 87


state 56

    (53) stmt -> RETURN expr ; .

    ;               reduce using rule 53 (stmt -> RETURN expr ; .)
    {               reduce using rule 53 (stmt -> RETURN expr ; .)
    WHILE           reduce using rule 53 (stmt -> RETURN expr ; .)
    FOR             reduce using rule 53 (stmt -> RETURN expr ; .)
    IF              reduce using rule 53 (stmt -> RETURN expr ; .)
    BREAK           reduce using rule 53 (stmt -> RETURN expr ; .)
    CONTINUE        reduce using rule 53 (stmt -> RETURN expr ; .)
    RETURN          reduce using rule 53 (stmt -> RETURN expr ; .)
    PRINT           reduce using rule 53 (stmt -> RETURN expr ; .)
    ID              reduce using rule 53 (stmt -> RETURN expr ; .)
    $end            reduce using rule 53 (stmt -> RETURN expr ; .)
    }               reduce using rule 53 (stmt -> RETURN expr ; .)
    ELSE            reduce using rule 53 (stmt -> RETURN expr ; .)


state 57

    (16) expr -> expr + . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    expr                           shift and go to state 88
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 58

    (17) expr -> expr - . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    expr                           shift and go to state 89
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 59

    (18) expr -> expr * . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    expr                           shift and go to state 90
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 60

    (19) expr -> expr / . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    expr                           shift and go to state 91
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 61

    (20) expr -> expr DOTADD . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    expr                           shift and go to state 92
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 62

    (21) expr -> expr DOTSUB . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    expr                           shift and go to state 93
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 63

    (22) expr -> expr DOTMUL . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    expr                           shift and go to state 94
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 64

    (23) expr -> expr DOTDIV . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    expr                           shift and go to state 95
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 65

    (30) expr -> expr ' .

    ;               reduce using rule 30 (expr -> expr ' .)
    +               reduce using rule 30 (expr -> expr ' .)
    -               reduce using rule 30 (expr -> expr ' .)
    *               reduce using rule 30 (expr -> expr ' .)
    /               reduce using rule 30 (expr -> expr ' .)
    DOTADD          reduce using rule 30 (expr -> expr ' .)
    DOTSUB          reduce using rule 30 (expr -> expr ' .)
    DOTMUL          reduce using rule 30 (expr -> expr ' .)
    DOTDIV          reduce using rule 30 (expr -> expr ' .)
    '               reduce using rule 30 (expr -> expr ' .)
    ,               reduce using rule 30 (expr -> expr ' .)
    <               reduce using rule 30 (expr -> expr ' .)
    >               reduce using rule 30 (expr -> expr ' .)
    LE              reduce using rule 30 (expr -> expr ' .)
    GE              reduce using rule 30 (expr -> expr ' .)
    EQ              reduce using rule 30 (expr -> expr ' .)
    NEQ             reduce using rule 30 (expr -> expr ' .)
    ]               reduce using rule 30 (expr -> expr ' .)
    )               reduce using rule 30 (expr -> expr ' .)
    :               reduce using rule 30 (expr -> expr ' .)
    {               reduce using rule 30 (expr -> expr ' .)
    WHILE           reduce using rule 30 (expr -> expr ' .)
    FOR             reduce using rule 30 (expr -> expr ' .)
    IF              reduce using rule 30 (expr -> expr ' .)
    BREAK           reduce using rule 30 (expr -> expr ' .)
    CONTINUE        reduce using rule 30 (expr -> expr ' .)
    RETURN          reduce using rule 30 (expr -> expr ' .)
    PRINT           reduce using rule 30 (expr -> expr ' .)
    ID              reduce using rule 30 (expr -> expr ' .)


state 66

    (29) expr -> - expr .
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    ;               reduce using rule 29 (expr -> - expr .)
    +               reduce using rule 29 (expr -> - expr .)
    -               reduce using rule 29 (expr -> - expr .)
    *               reduce using rule 29 (expr -> - expr .)
    /               reduce using rule 29 (expr -> - expr .)
    DOTADD          reduce using rule 29 (expr -> - expr .)
    DOTSUB          reduce using rule 29 (expr -> - expr .)
    DOTMUL          reduce using rule 29 (expr -> - expr .)
    DOTDIV          reduce using rule 29 (expr -> - expr .)
    ,               reduce using rule 29 (expr -> - expr .)
    <               reduce using rule 29 (expr -> - expr .)
    >               reduce using rule 29 (expr -> - expr .)
    LE              reduce using rule 29 (expr -> - expr .)
    GE              reduce using rule 29 (expr -> - expr .)
    EQ              reduce using rule 29 (expr -> - expr .)
    NEQ             reduce using rule 29 (expr -> - expr .)
    ]               reduce using rule 29 (expr -> - expr .)
    )               reduce using rule 29 (expr -> - expr .)
    :               reduce using rule 29 (expr -> - expr .)
    {               reduce using rule 29 (expr -> - expr .)
    WHILE           reduce using rule 29 (expr -> - expr .)
    FOR             reduce using rule 29 (expr -> - expr .)
    IF              reduce using rule 29 (expr -> - expr .)
    BREAK           reduce using rule 29 (expr -> - expr .)
    CONTINUE        reduce using rule 29 (expr -> - expr .)
    RETURN          reduce using rule 29 (expr -> - expr .)
    PRINT           reduce using rule 29 (expr -> - expr .)
    ID              reduce using rule 29 (expr -> - expr .)
    '               shift and go to state 65

  ! '               [ reduce using rule 29 (expr -> - expr .) ]
  ! +               [ shift and go to state 57 ]
  ! -               [ shift and go to state 58 ]
  ! *               [ shift and go to state 59 ]
  ! /               [ shift and go to state 60 ]
  ! DOTADD          [ shift and go to state 61 ]
  ! DOTSUB          [ shift and go to state 62 ]
  ! DOTMUL          [ shift and go to state 63 ]
  ! DOTDIV          [ shift and go to state 64 ]


state 67

    (28) expr -> ( expr . )
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    )               shift and go to state 96
    +               shift and go to state 57
    -               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTSUB          shift and go to state 62
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65


state 68

    (37) expr -> [ lists . ]
    (39) lists -> lists . , list

    ]               shift and go to state 97
    ,               shift and go to state 98


state 69

    (38) lists -> list .

    ]               reduce using rule 38 (lists -> list .)
    ,               reduce using rule 38 (lists -> list .)


state 70

    (46) expr -> fun ( . expr )
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    fun                            shift and go to state 39
    expr                           shift and go to state 99
    id                             shift and go to state 35

state 71

    (54) stmt -> PRINT seq ; .

    ;               reduce using rule 54 (stmt -> PRINT seq ; .)
    {               reduce using rule 54 (stmt -> PRINT seq ; .)
    WHILE           reduce using rule 54 (stmt -> PRINT seq ; .)
    FOR             reduce using rule 54 (stmt -> PRINT seq ; .)
    IF              reduce using rule 54 (stmt -> PRINT seq ; .)
    BREAK           reduce using rule 54 (stmt -> PRINT seq ; .)
    CONTINUE        reduce using rule 54 (stmt -> PRINT seq ; .)
    RETURN          reduce using rule 54 (stmt -> PRINT seq ; .)
    PRINT           reduce using rule 54 (stmt -> PRINT seq ; .)
    ID              reduce using rule 54 (stmt -> PRINT seq ; .)
    $end            reduce using rule 54 (stmt -> PRINT seq ; .)
    }               reduce using rule 54 (stmt -> PRINT seq ; .)
    ELSE            reduce using rule 54 (stmt -> PRINT seq ; .)


state 72

    (42) seq -> seq , . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    expr                           shift and go to state 100
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 73

    (11) stmt -> lvalue = expr ; .

    ;               reduce using rule 11 (stmt -> lvalue = expr ; .)
    {               reduce using rule 11 (stmt -> lvalue = expr ; .)
    WHILE           reduce using rule 11 (stmt -> lvalue = expr ; .)
    FOR             reduce using rule 11 (stmt -> lvalue = expr ; .)
    IF              reduce using rule 11 (stmt -> lvalue = expr ; .)
    BREAK           reduce using rule 11 (stmt -> lvalue = expr ; .)
    CONTINUE        reduce using rule 11 (stmt -> lvalue = expr ; .)
    RETURN          reduce using rule 11 (stmt -> lvalue = expr ; .)
    PRINT           reduce using rule 11 (stmt -> lvalue = expr ; .)
    ID              reduce using rule 11 (stmt -> lvalue = expr ; .)
    $end            reduce using rule 11 (stmt -> lvalue = expr ; .)
    }               reduce using rule 11 (stmt -> lvalue = expr ; .)
    ELSE            reduce using rule 11 (stmt -> lvalue = expr ; .)


state 74

    (12) stmt -> lvalue ADDASSIGN expr ; .

    ;               reduce using rule 12 (stmt -> lvalue ADDASSIGN expr ; .)
    {               reduce using rule 12 (stmt -> lvalue ADDASSIGN expr ; .)
    WHILE           reduce using rule 12 (stmt -> lvalue ADDASSIGN expr ; .)
    FOR             reduce using rule 12 (stmt -> lvalue ADDASSIGN expr ; .)
    IF              reduce using rule 12 (stmt -> lvalue ADDASSIGN expr ; .)
    BREAK           reduce using rule 12 (stmt -> lvalue ADDASSIGN expr ; .)
    CONTINUE        reduce using rule 12 (stmt -> lvalue ADDASSIGN expr ; .)
    RETURN          reduce using rule 12 (stmt -> lvalue ADDASSIGN expr ; .)
    PRINT           reduce using rule 12 (stmt -> lvalue ADDASSIGN expr ; .)
    ID              reduce using rule 12 (stmt -> lvalue ADDASSIGN expr ; .)
    $end            reduce using rule 12 (stmt -> lvalue ADDASSIGN expr ; .)
    }               reduce using rule 12 (stmt -> lvalue ADDASSIGN expr ; .)
    ELSE            reduce using rule 12 (stmt -> lvalue ADDASSIGN expr ; .)


state 75

    (13) stmt -> lvalue SUBASSIGN expr ; .

    ;               reduce using rule 13 (stmt -> lvalue SUBASSIGN expr ; .)
    {               reduce using rule 13 (stmt -> lvalue SUBASSIGN expr ; .)
    WHILE           reduce using rule 13 (stmt -> lvalue SUBASSIGN expr ; .)
    FOR             reduce using rule 13 (stmt -> lvalue SUBASSIGN expr ; .)
    IF              reduce using rule 13 (stmt -> lvalue SUBASSIGN expr ; .)
    BREAK           reduce using rule 13 (stmt -> lvalue SUBASSIGN expr ; .)
    CONTINUE        reduce using rule 13 (stmt -> lvalue SUBASSIGN expr ; .)
    RETURN          reduce using rule 13 (stmt -> lvalue SUBASSIGN expr ; .)
    PRINT           reduce using rule 13 (stmt -> lvalue SUBASSIGN expr ; .)
    ID              reduce using rule 13 (stmt -> lvalue SUBASSIGN expr ; .)
    $end            reduce using rule 13 (stmt -> lvalue SUBASSIGN expr ; .)
    }               reduce using rule 13 (stmt -> lvalue SUBASSIGN expr ; .)
    ELSE            reduce using rule 13 (stmt -> lvalue SUBASSIGN expr ; .)


state 76

    (14) stmt -> lvalue MULASSIGN expr ; .

    ;               reduce using rule 14 (stmt -> lvalue MULASSIGN expr ; .)
    {               reduce using rule 14 (stmt -> lvalue MULASSIGN expr ; .)
    WHILE           reduce using rule 14 (stmt -> lvalue MULASSIGN expr ; .)
    FOR             reduce using rule 14 (stmt -> lvalue MULASSIGN expr ; .)
    IF              reduce using rule 14 (stmt -> lvalue MULASSIGN expr ; .)
    BREAK           reduce using rule 14 (stmt -> lvalue MULASSIGN expr ; .)
    CONTINUE        reduce using rule 14 (stmt -> lvalue MULASSIGN expr ; .)
    RETURN          reduce using rule 14 (stmt -> lvalue MULASSIGN expr ; .)
    PRINT           reduce using rule 14 (stmt -> lvalue MULASSIGN expr ; .)
    ID              reduce using rule 14 (stmt -> lvalue MULASSIGN expr ; .)
    $end            reduce using rule 14 (stmt -> lvalue MULASSIGN expr ; .)
    }               reduce using rule 14 (stmt -> lvalue MULASSIGN expr ; .)
    ELSE            reduce using rule 14 (stmt -> lvalue MULASSIGN expr ; .)


state 77

    (15) stmt -> lvalue DIVASSIGN expr ; .

    ;               reduce using rule 15 (stmt -> lvalue DIVASSIGN expr ; .)
    {               reduce using rule 15 (stmt -> lvalue DIVASSIGN expr ; .)
    WHILE           reduce using rule 15 (stmt -> lvalue DIVASSIGN expr ; .)
    FOR             reduce using rule 15 (stmt -> lvalue DIVASSIGN expr ; .)
    IF              reduce using rule 15 (stmt -> lvalue DIVASSIGN expr ; .)
    BREAK           reduce using rule 15 (stmt -> lvalue DIVASSIGN expr ; .)
    CONTINUE        reduce using rule 15 (stmt -> lvalue DIVASSIGN expr ; .)
    RETURN          reduce using rule 15 (stmt -> lvalue DIVASSIGN expr ; .)
    PRINT           reduce using rule 15 (stmt -> lvalue DIVASSIGN expr ; .)
    ID              reduce using rule 15 (stmt -> lvalue DIVASSIGN expr ; .)
    $end            reduce using rule 15 (stmt -> lvalue DIVASSIGN expr ; .)
    }               reduce using rule 15 (stmt -> lvalue DIVASSIGN expr ; .)
    ELSE            reduce using rule 15 (stmt -> lvalue DIVASSIGN expr ; .)


state 78

    (47) stmt -> WHILE ( cond ) . stmt
    (6) stmt -> . ;
    (7) stmt -> . { stmts }
    (11) stmt -> . lvalue = expr ;
    (12) stmt -> . lvalue ADDASSIGN expr ;
    (13) stmt -> . lvalue SUBASSIGN expr ;
    (14) stmt -> . lvalue MULASSIGN expr ;
    (15) stmt -> . lvalue DIVASSIGN expr ;
    (47) stmt -> . WHILE ( cond ) stmt
    (48) stmt -> . FOR id = expr : expr stmt
    (49) stmt -> . IF ( cond ) stmt
    (50) stmt -> . IF ( cond ) stmt ELSE stmt
    (51) stmt -> . BREAK ;
    (52) stmt -> . CONTINUE ;
    (53) stmt -> . RETURN expr ;
    (54) stmt -> . PRINT seq ;
    (9) lvalue -> . id
    (10) lvalue -> . id list
    (8) id -> . ID

    ;               shift and go to state 5
    {               shift and go to state 6
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    RETURN          shift and go to state 14
    PRINT           shift and go to state 15
    ID              shift and go to state 16

    stmt                           shift and go to state 101
    lvalue                         shift and go to state 7
    id                             shift and go to state 10

state 79

    (31) cond -> expr < . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    expr                           shift and go to state 102
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 80

    (32) cond -> expr > . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    expr                           shift and go to state 103
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 81

    (33) cond -> expr LE . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    expr                           shift and go to state 104
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 82

    (34) cond -> expr GE . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    expr                           shift and go to state 105
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 83

    (35) cond -> expr EQ . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    expr                           shift and go to state 106
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 84

    (36) cond -> expr NEQ . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    expr                           shift and go to state 107
    id                             shift and go to state 35
    fun                            shift and go to state 39

state 85

    (48) stmt -> FOR id = expr . : expr stmt
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    :               shift and go to state 108
    +               shift and go to state 57
    -               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTSUB          shift and go to state 62
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65


state 86

    (40) list -> [ seq ] .

    =               reduce using rule 40 (list -> [ seq ] .)
    ADDASSIGN       reduce using rule 40 (list -> [ seq ] .)
    SUBASSIGN       reduce using rule 40 (list -> [ seq ] .)
    MULASSIGN       reduce using rule 40 (list -> [ seq ] .)
    DIVASSIGN       reduce using rule 40 (list -> [ seq ] .)
    ]               reduce using rule 40 (list -> [ seq ] .)
    ,               reduce using rule 40 (list -> [ seq ] .)


state 87

    (49) stmt -> IF ( cond ) . stmt
    (50) stmt -> IF ( cond ) . stmt ELSE stmt
    (6) stmt -> . ;
    (7) stmt -> . { stmts }
    (11) stmt -> . lvalue = expr ;
    (12) stmt -> . lvalue ADDASSIGN expr ;
    (13) stmt -> . lvalue SUBASSIGN expr ;
    (14) stmt -> . lvalue MULASSIGN expr ;
    (15) stmt -> . lvalue DIVASSIGN expr ;
    (47) stmt -> . WHILE ( cond ) stmt
    (48) stmt -> . FOR id = expr : expr stmt
    (49) stmt -> . IF ( cond ) stmt
    (50) stmt -> . IF ( cond ) stmt ELSE stmt
    (51) stmt -> . BREAK ;
    (52) stmt -> . CONTINUE ;
    (53) stmt -> . RETURN expr ;
    (54) stmt -> . PRINT seq ;
    (9) lvalue -> . id
    (10) lvalue -> . id list
    (8) id -> . ID

    ;               shift and go to state 5
    {               shift and go to state 6
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    RETURN          shift and go to state 14
    PRINT           shift and go to state 15
    ID              shift and go to state 16

    stmt                           shift and go to state 109
    lvalue                         shift and go to state 7
    id                             shift and go to state 10

state 88

    (16) expr -> expr + expr .
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    ;               reduce using rule 16 (expr -> expr + expr .)
    +               reduce using rule 16 (expr -> expr + expr .)
    -               reduce using rule 16 (expr -> expr + expr .)
    ,               reduce using rule 16 (expr -> expr + expr .)
    <               reduce using rule 16 (expr -> expr + expr .)
    >               reduce using rule 16 (expr -> expr + expr .)
    LE              reduce using rule 16 (expr -> expr + expr .)
    GE              reduce using rule 16 (expr -> expr + expr .)
    EQ              reduce using rule 16 (expr -> expr + expr .)
    NEQ             reduce using rule 16 (expr -> expr + expr .)
    ]               reduce using rule 16 (expr -> expr + expr .)
    )               reduce using rule 16 (expr -> expr + expr .)
    :               reduce using rule 16 (expr -> expr + expr .)
    {               reduce using rule 16 (expr -> expr + expr .)
    WHILE           reduce using rule 16 (expr -> expr + expr .)
    FOR             reduce using rule 16 (expr -> expr + expr .)
    IF              reduce using rule 16 (expr -> expr + expr .)
    BREAK           reduce using rule 16 (expr -> expr + expr .)
    CONTINUE        reduce using rule 16 (expr -> expr + expr .)
    RETURN          reduce using rule 16 (expr -> expr + expr .)
    PRINT           reduce using rule 16 (expr -> expr + expr .)
    ID              reduce using rule 16 (expr -> expr + expr .)
    *               shift and go to state 59
    /               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTSUB          shift and go to state 62
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65

  ! *               [ reduce using rule 16 (expr -> expr + expr .) ]
  ! /               [ reduce using rule 16 (expr -> expr + expr .) ]
  ! DOTADD          [ reduce using rule 16 (expr -> expr + expr .) ]
  ! DOTSUB          [ reduce using rule 16 (expr -> expr + expr .) ]
  ! DOTMUL          [ reduce using rule 16 (expr -> expr + expr .) ]
  ! DOTDIV          [ reduce using rule 16 (expr -> expr + expr .) ]
  ! '               [ reduce using rule 16 (expr -> expr + expr .) ]
  ! +               [ shift and go to state 57 ]
  ! -               [ shift and go to state 58 ]


state 89

    (17) expr -> expr - expr .
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    ;               reduce using rule 17 (expr -> expr - expr .)
    +               reduce using rule 17 (expr -> expr - expr .)
    -               reduce using rule 17 (expr -> expr - expr .)
    ,               reduce using rule 17 (expr -> expr - expr .)
    <               reduce using rule 17 (expr -> expr - expr .)
    >               reduce using rule 17 (expr -> expr - expr .)
    LE              reduce using rule 17 (expr -> expr - expr .)
    GE              reduce using rule 17 (expr -> expr - expr .)
    EQ              reduce using rule 17 (expr -> expr - expr .)
    NEQ             reduce using rule 17 (expr -> expr - expr .)
    ]               reduce using rule 17 (expr -> expr - expr .)
    )               reduce using rule 17 (expr -> expr - expr .)
    :               reduce using rule 17 (expr -> expr - expr .)
    {               reduce using rule 17 (expr -> expr - expr .)
    WHILE           reduce using rule 17 (expr -> expr - expr .)
    FOR             reduce using rule 17 (expr -> expr - expr .)
    IF              reduce using rule 17 (expr -> expr - expr .)
    BREAK           reduce using rule 17 (expr -> expr - expr .)
    CONTINUE        reduce using rule 17 (expr -> expr - expr .)
    RETURN          reduce using rule 17 (expr -> expr - expr .)
    PRINT           reduce using rule 17 (expr -> expr - expr .)
    ID              reduce using rule 17 (expr -> expr - expr .)
    *               shift and go to state 59
    /               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTSUB          shift and go to state 62
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65

  ! *               [ reduce using rule 17 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 17 (expr -> expr - expr .) ]
  ! DOTADD          [ reduce using rule 17 (expr -> expr - expr .) ]
  ! DOTSUB          [ reduce using rule 17 (expr -> expr - expr .) ]
  ! DOTMUL          [ reduce using rule 17 (expr -> expr - expr .) ]
  ! DOTDIV          [ reduce using rule 17 (expr -> expr - expr .) ]
  ! '               [ reduce using rule 17 (expr -> expr - expr .) ]
  ! +               [ shift and go to state 57 ]
  ! -               [ shift and go to state 58 ]


state 90

    (18) expr -> expr * expr .
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    ;               reduce using rule 18 (expr -> expr * expr .)
    +               reduce using rule 18 (expr -> expr * expr .)
    -               reduce using rule 18 (expr -> expr * expr .)
    *               reduce using rule 18 (expr -> expr * expr .)
    /               reduce using rule 18 (expr -> expr * expr .)
    ,               reduce using rule 18 (expr -> expr * expr .)
    <               reduce using rule 18 (expr -> expr * expr .)
    >               reduce using rule 18 (expr -> expr * expr .)
    LE              reduce using rule 18 (expr -> expr * expr .)
    GE              reduce using rule 18 (expr -> expr * expr .)
    EQ              reduce using rule 18 (expr -> expr * expr .)
    NEQ             reduce using rule 18 (expr -> expr * expr .)
    ]               reduce using rule 18 (expr -> expr * expr .)
    )               reduce using rule 18 (expr -> expr * expr .)
    :               reduce using rule 18 (expr -> expr * expr .)
    {               reduce using rule 18 (expr -> expr * expr .)
    WHILE           reduce using rule 18 (expr -> expr * expr .)
    FOR             reduce using rule 18 (expr -> expr * expr .)
    IF              reduce using rule 18 (expr -> expr * expr .)
    BREAK           reduce using rule 18 (expr -> expr * expr .)
    CONTINUE        reduce using rule 18 (expr -> expr * expr .)
    RETURN          reduce using rule 18 (expr -> expr * expr .)
    PRINT           reduce using rule 18 (expr -> expr * expr .)
    ID              reduce using rule 18 (expr -> expr * expr .)
    DOTADD          shift and go to state 61
    DOTSUB          shift and go to state 62
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65

  ! DOTADD          [ reduce using rule 18 (expr -> expr * expr .) ]
  ! DOTSUB          [ reduce using rule 18 (expr -> expr * expr .) ]
  ! DOTMUL          [ reduce using rule 18 (expr -> expr * expr .) ]
  ! DOTDIV          [ reduce using rule 18 (expr -> expr * expr .) ]
  ! '               [ reduce using rule 18 (expr -> expr * expr .) ]
  ! +               [ shift and go to state 57 ]
  ! -               [ shift and go to state 58 ]
  ! *               [ shift and go to state 59 ]
  ! /               [ shift and go to state 60 ]


state 91

    (19) expr -> expr / expr .
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    ;               reduce using rule 19 (expr -> expr / expr .)
    +               reduce using rule 19 (expr -> expr / expr .)
    -               reduce using rule 19 (expr -> expr / expr .)
    *               reduce using rule 19 (expr -> expr / expr .)
    /               reduce using rule 19 (expr -> expr / expr .)
    ,               reduce using rule 19 (expr -> expr / expr .)
    <               reduce using rule 19 (expr -> expr / expr .)
    >               reduce using rule 19 (expr -> expr / expr .)
    LE              reduce using rule 19 (expr -> expr / expr .)
    GE              reduce using rule 19 (expr -> expr / expr .)
    EQ              reduce using rule 19 (expr -> expr / expr .)
    NEQ             reduce using rule 19 (expr -> expr / expr .)
    ]               reduce using rule 19 (expr -> expr / expr .)
    )               reduce using rule 19 (expr -> expr / expr .)
    :               reduce using rule 19 (expr -> expr / expr .)
    {               reduce using rule 19 (expr -> expr / expr .)
    WHILE           reduce using rule 19 (expr -> expr / expr .)
    FOR             reduce using rule 19 (expr -> expr / expr .)
    IF              reduce using rule 19 (expr -> expr / expr .)
    BREAK           reduce using rule 19 (expr -> expr / expr .)
    CONTINUE        reduce using rule 19 (expr -> expr / expr .)
    RETURN          reduce using rule 19 (expr -> expr / expr .)
    PRINT           reduce using rule 19 (expr -> expr / expr .)
    ID              reduce using rule 19 (expr -> expr / expr .)
    DOTADD          shift and go to state 61
    DOTSUB          shift and go to state 62
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65

  ! DOTADD          [ reduce using rule 19 (expr -> expr / expr .) ]
  ! DOTSUB          [ reduce using rule 19 (expr -> expr / expr .) ]
  ! DOTMUL          [ reduce using rule 19 (expr -> expr / expr .) ]
  ! DOTDIV          [ reduce using rule 19 (expr -> expr / expr .) ]
  ! '               [ reduce using rule 19 (expr -> expr / expr .) ]
  ! +               [ shift and go to state 57 ]
  ! -               [ shift and go to state 58 ]
  ! *               [ shift and go to state 59 ]
  ! /               [ shift and go to state 60 ]


state 92

    (20) expr -> expr DOTADD expr .
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    ;               reduce using rule 20 (expr -> expr DOTADD expr .)
    +               reduce using rule 20 (expr -> expr DOTADD expr .)
    -               reduce using rule 20 (expr -> expr DOTADD expr .)
    *               reduce using rule 20 (expr -> expr DOTADD expr .)
    /               reduce using rule 20 (expr -> expr DOTADD expr .)
    DOTADD          reduce using rule 20 (expr -> expr DOTADD expr .)
    DOTSUB          reduce using rule 20 (expr -> expr DOTADD expr .)
    ,               reduce using rule 20 (expr -> expr DOTADD expr .)
    <               reduce using rule 20 (expr -> expr DOTADD expr .)
    >               reduce using rule 20 (expr -> expr DOTADD expr .)
    LE              reduce using rule 20 (expr -> expr DOTADD expr .)
    GE              reduce using rule 20 (expr -> expr DOTADD expr .)
    EQ              reduce using rule 20 (expr -> expr DOTADD expr .)
    NEQ             reduce using rule 20 (expr -> expr DOTADD expr .)
    ]               reduce using rule 20 (expr -> expr DOTADD expr .)
    )               reduce using rule 20 (expr -> expr DOTADD expr .)
    :               reduce using rule 20 (expr -> expr DOTADD expr .)
    {               reduce using rule 20 (expr -> expr DOTADD expr .)
    WHILE           reduce using rule 20 (expr -> expr DOTADD expr .)
    FOR             reduce using rule 20 (expr -> expr DOTADD expr .)
    IF              reduce using rule 20 (expr -> expr DOTADD expr .)
    BREAK           reduce using rule 20 (expr -> expr DOTADD expr .)
    CONTINUE        reduce using rule 20 (expr -> expr DOTADD expr .)
    RETURN          reduce using rule 20 (expr -> expr DOTADD expr .)
    PRINT           reduce using rule 20 (expr -> expr DOTADD expr .)
    ID              reduce using rule 20 (expr -> expr DOTADD expr .)
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65

  ! DOTMUL          [ reduce using rule 20 (expr -> expr DOTADD expr .) ]
  ! DOTDIV          [ reduce using rule 20 (expr -> expr DOTADD expr .) ]
  ! '               [ reduce using rule 20 (expr -> expr DOTADD expr .) ]
  ! +               [ shift and go to state 57 ]
  ! -               [ shift and go to state 58 ]
  ! *               [ shift and go to state 59 ]
  ! /               [ shift and go to state 60 ]
  ! DOTADD          [ shift and go to state 61 ]
  ! DOTSUB          [ shift and go to state 62 ]


state 93

    (21) expr -> expr DOTSUB expr .
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    ;               reduce using rule 21 (expr -> expr DOTSUB expr .)
    +               reduce using rule 21 (expr -> expr DOTSUB expr .)
    -               reduce using rule 21 (expr -> expr DOTSUB expr .)
    *               reduce using rule 21 (expr -> expr DOTSUB expr .)
    /               reduce using rule 21 (expr -> expr DOTSUB expr .)
    DOTADD          reduce using rule 21 (expr -> expr DOTSUB expr .)
    DOTSUB          reduce using rule 21 (expr -> expr DOTSUB expr .)
    ,               reduce using rule 21 (expr -> expr DOTSUB expr .)
    <               reduce using rule 21 (expr -> expr DOTSUB expr .)
    >               reduce using rule 21 (expr -> expr DOTSUB expr .)
    LE              reduce using rule 21 (expr -> expr DOTSUB expr .)
    GE              reduce using rule 21 (expr -> expr DOTSUB expr .)
    EQ              reduce using rule 21 (expr -> expr DOTSUB expr .)
    NEQ             reduce using rule 21 (expr -> expr DOTSUB expr .)
    ]               reduce using rule 21 (expr -> expr DOTSUB expr .)
    )               reduce using rule 21 (expr -> expr DOTSUB expr .)
    :               reduce using rule 21 (expr -> expr DOTSUB expr .)
    {               reduce using rule 21 (expr -> expr DOTSUB expr .)
    WHILE           reduce using rule 21 (expr -> expr DOTSUB expr .)
    FOR             reduce using rule 21 (expr -> expr DOTSUB expr .)
    IF              reduce using rule 21 (expr -> expr DOTSUB expr .)
    BREAK           reduce using rule 21 (expr -> expr DOTSUB expr .)
    CONTINUE        reduce using rule 21 (expr -> expr DOTSUB expr .)
    RETURN          reduce using rule 21 (expr -> expr DOTSUB expr .)
    PRINT           reduce using rule 21 (expr -> expr DOTSUB expr .)
    ID              reduce using rule 21 (expr -> expr DOTSUB expr .)
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65

  ! DOTMUL          [ reduce using rule 21 (expr -> expr DOTSUB expr .) ]
  ! DOTDIV          [ reduce using rule 21 (expr -> expr DOTSUB expr .) ]
  ! '               [ reduce using rule 21 (expr -> expr DOTSUB expr .) ]
  ! +               [ shift and go to state 57 ]
  ! -               [ shift and go to state 58 ]
  ! *               [ shift and go to state 59 ]
  ! /               [ shift and go to state 60 ]
  ! DOTADD          [ shift and go to state 61 ]
  ! DOTSUB          [ shift and go to state 62 ]


state 94

    (22) expr -> expr DOTMUL expr .
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    ;               reduce using rule 22 (expr -> expr DOTMUL expr .)
    +               reduce using rule 22 (expr -> expr DOTMUL expr .)
    -               reduce using rule 22 (expr -> expr DOTMUL expr .)
    *               reduce using rule 22 (expr -> expr DOTMUL expr .)
    /               reduce using rule 22 (expr -> expr DOTMUL expr .)
    DOTADD          reduce using rule 22 (expr -> expr DOTMUL expr .)
    DOTSUB          reduce using rule 22 (expr -> expr DOTMUL expr .)
    DOTMUL          reduce using rule 22 (expr -> expr DOTMUL expr .)
    DOTDIV          reduce using rule 22 (expr -> expr DOTMUL expr .)
    ,               reduce using rule 22 (expr -> expr DOTMUL expr .)
    <               reduce using rule 22 (expr -> expr DOTMUL expr .)
    >               reduce using rule 22 (expr -> expr DOTMUL expr .)
    LE              reduce using rule 22 (expr -> expr DOTMUL expr .)
    GE              reduce using rule 22 (expr -> expr DOTMUL expr .)
    EQ              reduce using rule 22 (expr -> expr DOTMUL expr .)
    NEQ             reduce using rule 22 (expr -> expr DOTMUL expr .)
    ]               reduce using rule 22 (expr -> expr DOTMUL expr .)
    )               reduce using rule 22 (expr -> expr DOTMUL expr .)
    :               reduce using rule 22 (expr -> expr DOTMUL expr .)
    {               reduce using rule 22 (expr -> expr DOTMUL expr .)
    WHILE           reduce using rule 22 (expr -> expr DOTMUL expr .)
    FOR             reduce using rule 22 (expr -> expr DOTMUL expr .)
    IF              reduce using rule 22 (expr -> expr DOTMUL expr .)
    BREAK           reduce using rule 22 (expr -> expr DOTMUL expr .)
    CONTINUE        reduce using rule 22 (expr -> expr DOTMUL expr .)
    RETURN          reduce using rule 22 (expr -> expr DOTMUL expr .)
    PRINT           reduce using rule 22 (expr -> expr DOTMUL expr .)
    ID              reduce using rule 22 (expr -> expr DOTMUL expr .)
    '               shift and go to state 65

  ! '               [ reduce using rule 22 (expr -> expr DOTMUL expr .) ]
  ! +               [ shift and go to state 57 ]
  ! -               [ shift and go to state 58 ]
  ! *               [ shift and go to state 59 ]
  ! /               [ shift and go to state 60 ]
  ! DOTADD          [ shift and go to state 61 ]
  ! DOTSUB          [ shift and go to state 62 ]
  ! DOTMUL          [ shift and go to state 63 ]
  ! DOTDIV          [ shift and go to state 64 ]


state 95

    (23) expr -> expr DOTDIV expr .
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    ;               reduce using rule 23 (expr -> expr DOTDIV expr .)
    +               reduce using rule 23 (expr -> expr DOTDIV expr .)
    -               reduce using rule 23 (expr -> expr DOTDIV expr .)
    *               reduce using rule 23 (expr -> expr DOTDIV expr .)
    /               reduce using rule 23 (expr -> expr DOTDIV expr .)
    DOTADD          reduce using rule 23 (expr -> expr DOTDIV expr .)
    DOTSUB          reduce using rule 23 (expr -> expr DOTDIV expr .)
    DOTMUL          reduce using rule 23 (expr -> expr DOTDIV expr .)
    DOTDIV          reduce using rule 23 (expr -> expr DOTDIV expr .)
    ,               reduce using rule 23 (expr -> expr DOTDIV expr .)
    <               reduce using rule 23 (expr -> expr DOTDIV expr .)
    >               reduce using rule 23 (expr -> expr DOTDIV expr .)
    LE              reduce using rule 23 (expr -> expr DOTDIV expr .)
    GE              reduce using rule 23 (expr -> expr DOTDIV expr .)
    EQ              reduce using rule 23 (expr -> expr DOTDIV expr .)
    NEQ             reduce using rule 23 (expr -> expr DOTDIV expr .)
    ]               reduce using rule 23 (expr -> expr DOTDIV expr .)
    )               reduce using rule 23 (expr -> expr DOTDIV expr .)
    :               reduce using rule 23 (expr -> expr DOTDIV expr .)
    {               reduce using rule 23 (expr -> expr DOTDIV expr .)
    WHILE           reduce using rule 23 (expr -> expr DOTDIV expr .)
    FOR             reduce using rule 23 (expr -> expr DOTDIV expr .)
    IF              reduce using rule 23 (expr -> expr DOTDIV expr .)
    BREAK           reduce using rule 23 (expr -> expr DOTDIV expr .)
    CONTINUE        reduce using rule 23 (expr -> expr DOTDIV expr .)
    RETURN          reduce using rule 23 (expr -> expr DOTDIV expr .)
    PRINT           reduce using rule 23 (expr -> expr DOTDIV expr .)
    ID              reduce using rule 23 (expr -> expr DOTDIV expr .)
    '               shift and go to state 65

  ! '               [ reduce using rule 23 (expr -> expr DOTDIV expr .) ]
  ! +               [ shift and go to state 57 ]
  ! -               [ shift and go to state 58 ]
  ! *               [ shift and go to state 59 ]
  ! /               [ shift and go to state 60 ]
  ! DOTADD          [ shift and go to state 61 ]
  ! DOTSUB          [ shift and go to state 62 ]
  ! DOTMUL          [ shift and go to state 63 ]
  ! DOTDIV          [ shift and go to state 64 ]


state 96

    (28) expr -> ( expr ) .

    ;               reduce using rule 28 (expr -> ( expr ) .)
    +               reduce using rule 28 (expr -> ( expr ) .)
    -               reduce using rule 28 (expr -> ( expr ) .)
    *               reduce using rule 28 (expr -> ( expr ) .)
    /               reduce using rule 28 (expr -> ( expr ) .)
    DOTADD          reduce using rule 28 (expr -> ( expr ) .)
    DOTSUB          reduce using rule 28 (expr -> ( expr ) .)
    DOTMUL          reduce using rule 28 (expr -> ( expr ) .)
    DOTDIV          reduce using rule 28 (expr -> ( expr ) .)
    '               reduce using rule 28 (expr -> ( expr ) .)
    ,               reduce using rule 28 (expr -> ( expr ) .)
    <               reduce using rule 28 (expr -> ( expr ) .)
    >               reduce using rule 28 (expr -> ( expr ) .)
    LE              reduce using rule 28 (expr -> ( expr ) .)
    GE              reduce using rule 28 (expr -> ( expr ) .)
    EQ              reduce using rule 28 (expr -> ( expr ) .)
    NEQ             reduce using rule 28 (expr -> ( expr ) .)
    ]               reduce using rule 28 (expr -> ( expr ) .)
    )               reduce using rule 28 (expr -> ( expr ) .)
    :               reduce using rule 28 (expr -> ( expr ) .)
    {               reduce using rule 28 (expr -> ( expr ) .)
    WHILE           reduce using rule 28 (expr -> ( expr ) .)
    FOR             reduce using rule 28 (expr -> ( expr ) .)
    IF              reduce using rule 28 (expr -> ( expr ) .)
    BREAK           reduce using rule 28 (expr -> ( expr ) .)
    CONTINUE        reduce using rule 28 (expr -> ( expr ) .)
    RETURN          reduce using rule 28 (expr -> ( expr ) .)
    PRINT           reduce using rule 28 (expr -> ( expr ) .)
    ID              reduce using rule 28 (expr -> ( expr ) .)


state 97

    (37) expr -> [ lists ] .

    ;               reduce using rule 37 (expr -> [ lists ] .)
    +               reduce using rule 37 (expr -> [ lists ] .)
    -               reduce using rule 37 (expr -> [ lists ] .)
    *               reduce using rule 37 (expr -> [ lists ] .)
    /               reduce using rule 37 (expr -> [ lists ] .)
    DOTADD          reduce using rule 37 (expr -> [ lists ] .)
    DOTSUB          reduce using rule 37 (expr -> [ lists ] .)
    DOTMUL          reduce using rule 37 (expr -> [ lists ] .)
    DOTDIV          reduce using rule 37 (expr -> [ lists ] .)
    '               reduce using rule 37 (expr -> [ lists ] .)
    ,               reduce using rule 37 (expr -> [ lists ] .)
    <               reduce using rule 37 (expr -> [ lists ] .)
    >               reduce using rule 37 (expr -> [ lists ] .)
    LE              reduce using rule 37 (expr -> [ lists ] .)
    GE              reduce using rule 37 (expr -> [ lists ] .)
    EQ              reduce using rule 37 (expr -> [ lists ] .)
    NEQ             reduce using rule 37 (expr -> [ lists ] .)
    ]               reduce using rule 37 (expr -> [ lists ] .)
    )               reduce using rule 37 (expr -> [ lists ] .)
    :               reduce using rule 37 (expr -> [ lists ] .)
    {               reduce using rule 37 (expr -> [ lists ] .)
    WHILE           reduce using rule 37 (expr -> [ lists ] .)
    FOR             reduce using rule 37 (expr -> [ lists ] .)
    IF              reduce using rule 37 (expr -> [ lists ] .)
    BREAK           reduce using rule 37 (expr -> [ lists ] .)
    CONTINUE        reduce using rule 37 (expr -> [ lists ] .)
    RETURN          reduce using rule 37 (expr -> [ lists ] .)
    PRINT           reduce using rule 37 (expr -> [ lists ] .)
    ID              reduce using rule 37 (expr -> [ lists ] .)


state 98

    (39) lists -> lists , . list
    (40) list -> . [ seq ]

    [               shift and go to state 27

    list                           shift and go to state 110

state 99

    (46) expr -> fun ( expr . )
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    )               shift and go to state 111
    +               shift and go to state 57
    -               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTSUB          shift and go to state 62
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65


state 100

    (42) seq -> seq , expr .
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    ;               reduce using rule 42 (seq -> seq , expr .)
    ,               reduce using rule 42 (seq -> seq , expr .)
    ]               reduce using rule 42 (seq -> seq , expr .)
    +               shift and go to state 57
    -               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTSUB          shift and go to state 62
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65


state 101

    (47) stmt -> WHILE ( cond ) stmt .

    ;               reduce using rule 47 (stmt -> WHILE ( cond ) stmt .)
    {               reduce using rule 47 (stmt -> WHILE ( cond ) stmt .)
    WHILE           reduce using rule 47 (stmt -> WHILE ( cond ) stmt .)
    FOR             reduce using rule 47 (stmt -> WHILE ( cond ) stmt .)
    IF              reduce using rule 47 (stmt -> WHILE ( cond ) stmt .)
    BREAK           reduce using rule 47 (stmt -> WHILE ( cond ) stmt .)
    CONTINUE        reduce using rule 47 (stmt -> WHILE ( cond ) stmt .)
    RETURN          reduce using rule 47 (stmt -> WHILE ( cond ) stmt .)
    PRINT           reduce using rule 47 (stmt -> WHILE ( cond ) stmt .)
    ID              reduce using rule 47 (stmt -> WHILE ( cond ) stmt .)
    $end            reduce using rule 47 (stmt -> WHILE ( cond ) stmt .)
    }               reduce using rule 47 (stmt -> WHILE ( cond ) stmt .)
    ELSE            reduce using rule 47 (stmt -> WHILE ( cond ) stmt .)


state 102

    (31) cond -> expr < expr .
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    )               reduce using rule 31 (cond -> expr < expr .)
    +               shift and go to state 57
    -               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTSUB          shift and go to state 62
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65


state 103

    (32) cond -> expr > expr .
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    )               reduce using rule 32 (cond -> expr > expr .)
    +               shift and go to state 57
    -               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTSUB          shift and go to state 62
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65


state 104

    (33) cond -> expr LE expr .
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    )               reduce using rule 33 (cond -> expr LE expr .)
    +               shift and go to state 57
    -               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTSUB          shift and go to state 62
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65


state 105

    (34) cond -> expr GE expr .
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    )               reduce using rule 34 (cond -> expr GE expr .)
    +               shift and go to state 57
    -               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTSUB          shift and go to state 62
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65


state 106

    (35) cond -> expr EQ expr .
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    )               reduce using rule 35 (cond -> expr EQ expr .)
    +               shift and go to state 57
    -               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTSUB          shift and go to state 62
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65


state 107

    (36) cond -> expr NEQ expr .
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '

    )               reduce using rule 36 (cond -> expr NEQ expr .)
    +               shift and go to state 57
    -               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTSUB          shift and go to state 62
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65


state 108

    (48) stmt -> FOR id = expr : . expr stmt
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . expr DOTADD expr
    (21) expr -> . expr DOTSUB expr
    (22) expr -> . expr DOTMUL expr
    (23) expr -> . expr DOTDIV expr
    (24) expr -> . FLOATNUM
    (25) expr -> . INTNUM
    (26) expr -> . id
    (27) expr -> . STR
    (28) expr -> . ( expr )
    (29) expr -> . - expr
    (30) expr -> . expr '
    (37) expr -> . [ lists ]
    (46) expr -> . fun ( expr )
    (8) id -> . ID
    (43) fun -> . ZEROS
    (44) fun -> . EYE
    (45) fun -> . ONES

    FLOATNUM        shift and go to state 33
    INTNUM          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 37
    -               shift and go to state 32
    [               shift and go to state 38
    ID              shift and go to state 16
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    ONES            shift and go to state 42

    id                             shift and go to state 35
    expr                           shift and go to state 112
    fun                            shift and go to state 39

state 109

    (49) stmt -> IF ( cond ) stmt .
    (50) stmt -> IF ( cond ) stmt . ELSE stmt

    ;               reduce using rule 49 (stmt -> IF ( cond ) stmt .)
    {               reduce using rule 49 (stmt -> IF ( cond ) stmt .)
    WHILE           reduce using rule 49 (stmt -> IF ( cond ) stmt .)
    FOR             reduce using rule 49 (stmt -> IF ( cond ) stmt .)
    IF              reduce using rule 49 (stmt -> IF ( cond ) stmt .)
    BREAK           reduce using rule 49 (stmt -> IF ( cond ) stmt .)
    CONTINUE        reduce using rule 49 (stmt -> IF ( cond ) stmt .)
    RETURN          reduce using rule 49 (stmt -> IF ( cond ) stmt .)
    PRINT           reduce using rule 49 (stmt -> IF ( cond ) stmt .)
    ID              reduce using rule 49 (stmt -> IF ( cond ) stmt .)
    $end            reduce using rule 49 (stmt -> IF ( cond ) stmt .)
    }               reduce using rule 49 (stmt -> IF ( cond ) stmt .)
    ELSE            shift and go to state 113

  ! ELSE            [ reduce using rule 49 (stmt -> IF ( cond ) stmt .) ]


state 110

    (39) lists -> lists , list .

    ]               reduce using rule 39 (lists -> lists , list .)
    ,               reduce using rule 39 (lists -> lists , list .)


state 111

    (46) expr -> fun ( expr ) .

    ;               reduce using rule 46 (expr -> fun ( expr ) .)
    +               reduce using rule 46 (expr -> fun ( expr ) .)
    -               reduce using rule 46 (expr -> fun ( expr ) .)
    *               reduce using rule 46 (expr -> fun ( expr ) .)
    /               reduce using rule 46 (expr -> fun ( expr ) .)
    DOTADD          reduce using rule 46 (expr -> fun ( expr ) .)
    DOTSUB          reduce using rule 46 (expr -> fun ( expr ) .)
    DOTMUL          reduce using rule 46 (expr -> fun ( expr ) .)
    DOTDIV          reduce using rule 46 (expr -> fun ( expr ) .)
    '               reduce using rule 46 (expr -> fun ( expr ) .)
    ,               reduce using rule 46 (expr -> fun ( expr ) .)
    <               reduce using rule 46 (expr -> fun ( expr ) .)
    >               reduce using rule 46 (expr -> fun ( expr ) .)
    LE              reduce using rule 46 (expr -> fun ( expr ) .)
    GE              reduce using rule 46 (expr -> fun ( expr ) .)
    EQ              reduce using rule 46 (expr -> fun ( expr ) .)
    NEQ             reduce using rule 46 (expr -> fun ( expr ) .)
    ]               reduce using rule 46 (expr -> fun ( expr ) .)
    )               reduce using rule 46 (expr -> fun ( expr ) .)
    :               reduce using rule 46 (expr -> fun ( expr ) .)
    {               reduce using rule 46 (expr -> fun ( expr ) .)
    WHILE           reduce using rule 46 (expr -> fun ( expr ) .)
    FOR             reduce using rule 46 (expr -> fun ( expr ) .)
    IF              reduce using rule 46 (expr -> fun ( expr ) .)
    BREAK           reduce using rule 46 (expr -> fun ( expr ) .)
    CONTINUE        reduce using rule 46 (expr -> fun ( expr ) .)
    RETURN          reduce using rule 46 (expr -> fun ( expr ) .)
    PRINT           reduce using rule 46 (expr -> fun ( expr ) .)
    ID              reduce using rule 46 (expr -> fun ( expr ) .)


state 112

    (48) stmt -> FOR id = expr : expr . stmt
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr
    (20) expr -> expr . DOTADD expr
    (21) expr -> expr . DOTSUB expr
    (22) expr -> expr . DOTMUL expr
    (23) expr -> expr . DOTDIV expr
    (30) expr -> expr . '
    (6) stmt -> . ;
    (7) stmt -> . { stmts }
    (11) stmt -> . lvalue = expr ;
    (12) stmt -> . lvalue ADDASSIGN expr ;
    (13) stmt -> . lvalue SUBASSIGN expr ;
    (14) stmt -> . lvalue MULASSIGN expr ;
    (15) stmt -> . lvalue DIVASSIGN expr ;
    (47) stmt -> . WHILE ( cond ) stmt
    (48) stmt -> . FOR id = expr : expr stmt
    (49) stmt -> . IF ( cond ) stmt
    (50) stmt -> . IF ( cond ) stmt ELSE stmt
    (51) stmt -> . BREAK ;
    (52) stmt -> . CONTINUE ;
    (53) stmt -> . RETURN expr ;
    (54) stmt -> . PRINT seq ;
    (9) lvalue -> . id
    (10) lvalue -> . id list
    (8) id -> . ID

    +               shift and go to state 57
    -               shift and go to state 58
    *               shift and go to state 59
    /               shift and go to state 60
    DOTADD          shift and go to state 61
    DOTSUB          shift and go to state 62
    DOTMUL          shift and go to state 63
    DOTDIV          shift and go to state 64
    '               shift and go to state 65
    ;               shift and go to state 5
    {               shift and go to state 6
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    RETURN          shift and go to state 14
    PRINT           shift and go to state 15
    ID              shift and go to state 16

    id                             shift and go to state 10
    stmt                           shift and go to state 114
    lvalue                         shift and go to state 7

state 113

    (50) stmt -> IF ( cond ) stmt ELSE . stmt
    (6) stmt -> . ;
    (7) stmt -> . { stmts }
    (11) stmt -> . lvalue = expr ;
    (12) stmt -> . lvalue ADDASSIGN expr ;
    (13) stmt -> . lvalue SUBASSIGN expr ;
    (14) stmt -> . lvalue MULASSIGN expr ;
    (15) stmt -> . lvalue DIVASSIGN expr ;
    (47) stmt -> . WHILE ( cond ) stmt
    (48) stmt -> . FOR id = expr : expr stmt
    (49) stmt -> . IF ( cond ) stmt
    (50) stmt -> . IF ( cond ) stmt ELSE stmt
    (51) stmt -> . BREAK ;
    (52) stmt -> . CONTINUE ;
    (53) stmt -> . RETURN expr ;
    (54) stmt -> . PRINT seq ;
    (9) lvalue -> . id
    (10) lvalue -> . id list
    (8) id -> . ID

    ;               shift and go to state 5
    {               shift and go to state 6
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    RETURN          shift and go to state 14
    PRINT           shift and go to state 15
    ID              shift and go to state 16

    stmt                           shift and go to state 115
    lvalue                         shift and go to state 7
    id                             shift and go to state 10

state 114

    (48) stmt -> FOR id = expr : expr stmt .

    ;               reduce using rule 48 (stmt -> FOR id = expr : expr stmt .)
    {               reduce using rule 48 (stmt -> FOR id = expr : expr stmt .)
    WHILE           reduce using rule 48 (stmt -> FOR id = expr : expr stmt .)
    FOR             reduce using rule 48 (stmt -> FOR id = expr : expr stmt .)
    IF              reduce using rule 48 (stmt -> FOR id = expr : expr stmt .)
    BREAK           reduce using rule 48 (stmt -> FOR id = expr : expr stmt .)
    CONTINUE        reduce using rule 48 (stmt -> FOR id = expr : expr stmt .)
    RETURN          reduce using rule 48 (stmt -> FOR id = expr : expr stmt .)
    PRINT           reduce using rule 48 (stmt -> FOR id = expr : expr stmt .)
    ID              reduce using rule 48 (stmt -> FOR id = expr : expr stmt .)
    $end            reduce using rule 48 (stmt -> FOR id = expr : expr stmt .)
    }               reduce using rule 48 (stmt -> FOR id = expr : expr stmt .)
    ELSE            reduce using rule 48 (stmt -> FOR id = expr : expr stmt .)


state 115

    (50) stmt -> IF ( cond ) stmt ELSE stmt .

    ;               reduce using rule 50 (stmt -> IF ( cond ) stmt ELSE stmt .)
    {               reduce using rule 50 (stmt -> IF ( cond ) stmt ELSE stmt .)
    WHILE           reduce using rule 50 (stmt -> IF ( cond ) stmt ELSE stmt .)
    FOR             reduce using rule 50 (stmt -> IF ( cond ) stmt ELSE stmt .)
    IF              reduce using rule 50 (stmt -> IF ( cond ) stmt ELSE stmt .)
    BREAK           reduce using rule 50 (stmt -> IF ( cond ) stmt ELSE stmt .)
    CONTINUE        reduce using rule 50 (stmt -> IF ( cond ) stmt ELSE stmt .)
    RETURN          reduce using rule 50 (stmt -> IF ( cond ) stmt ELSE stmt .)
    PRINT           reduce using rule 50 (stmt -> IF ( cond ) stmt ELSE stmt .)
    ID              reduce using rule 50 (stmt -> IF ( cond ) stmt ELSE stmt .)
    $end            reduce using rule 50 (stmt -> IF ( cond ) stmt ELSE stmt .)
    }               reduce using rule 50 (stmt -> IF ( cond ) stmt ELSE stmt .)
    ELSE            reduce using rule 50 (stmt -> IF ( cond ) stmt ELSE stmt .)


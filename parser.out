Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmts_opt
Rule 2     stmts_opt -> stmts
Rule 3     stmts_opt -> <empty>
Rule 4     stmts -> stmts stmt
Rule 5     stmts -> stmt
Rule 6     stmt -> ;
Rule 7     stmt -> { stmts }
Rule 8     stmt -> ID = expr ;
Rule 9     stmt -> ID ADDASSIGN expr ;
Rule 10    stmt -> ID SUBASSIGN expr ;
Rule 11    stmt -> ID MULASSIGN expr ;
Rule 12    stmt -> ID DIVASSIGN expr ;
Rule 13    expr -> expr + expr
Rule 14    expr -> expr - expr
Rule 15    expr -> expr * expr
Rule 16    expr -> expr / expr
Rule 17    expr -> expr DOTADD expr
Rule 18    expr -> expr DOTSUB expr
Rule 19    expr -> expr DOTMUL expr
Rule 20    expr -> expr DOTDIV expr
Rule 21    expr -> FLOATNUM
Rule 22    expr -> INTNUM
Rule 23    expr -> ID
Rule 24    expr -> STR
Rule 25    expr -> ( expr )
Rule 26    expr -> - expr
Rule 27    expr -> expr '
Rule 28    cond -> expr < expr
Rule 29    cond -> expr > expr
Rule 30    cond -> expr LE expr
Rule 31    cond -> expr GE expr
Rule 32    cond -> expr EQ expr
Rule 33    cond -> expr NEQ expr
Rule 34    expr -> [ lists ]
Rule 35    lists -> list
Rule 36    lists -> lists , list
Rule 37    list -> [ seq ]
Rule 38    seq -> expr
Rule 39    seq -> seq , expr
Rule 40    fun -> ZEROS
Rule 41    fun -> EYE
Rule 42    fun -> ONES
Rule 43    expr -> fun ( expr )
Rule 44    stmt -> WHILE ( cond ) stmt
Rule 45    stmt -> FOR ID = expr : expr stmt
Rule 46    stmt -> IF ( cond ) stmt
Rule 47    stmt -> IF ( cond ) stmt ELSE stmt
Rule 48    stmt -> BREAK ;
Rule 49    stmt -> CONTINUE ;
Rule 50    stmt -> RETURN expr ;
Rule 51    stmt -> PRINT seq ;
Rule 52    stmt -> ID list = expr

Terminals, with rules where they appear

'                    : 27
(                    : 25 43 44 46 47
)                    : 25 43 44 46 47
*                    : 15
+                    : 13
,                    : 36 39
-                    : 14 26
/                    : 16
:                    : 45
;                    : 6 8 9 10 11 12 48 49 50 51
<                    : 28
=                    : 8 45 52
>                    : 29
ADDASSIGN            : 9
BREAK                : 48
CONTINUE             : 49
DIVASSIGN            : 12
DOTADD               : 17
DOTDIV               : 20
DOTMUL               : 19
DOTSUB               : 18
ELSE                 : 47
EQ                   : 32
EYE                  : 41
FLOATNUM             : 21
FOR                  : 45
GE                   : 31
ID                   : 8 9 10 11 12 23 45 52
IF                   : 46 47
INTNUM               : 22
LE                   : 30
MULASSIGN            : 11
NEQ                  : 33
ONES                 : 42
PRINT                : 51
RETURN               : 50
STR                  : 24
SUBASSIGN            : 10
WHILE                : 44
ZEROS                : 40
[                    : 34 37
]                    : 34 37
error                : 
{                    : 7
}                    : 7

Nonterminals, with rules where they appear

cond                 : 44 46 47
expr                 : 8 9 10 11 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 25 26 27 28 28 29 29 30 30 31 31 32 32 33 33 38 39 43 45 45 50 52
fun                  : 43
list                 : 35 36 52
lists                : 34 36
program              : 0
seq                  : 37 39 51
stmt                 : 4 5 44 45 46 47 47
stmts                : 2 4 7
stmts_opt            : 1

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmts_opt
    (2) stmts_opt -> . stmts
    (3) stmts_opt -> .
    (4) stmts -> . stmts stmt
    (5) stmts -> . stmt
    (6) stmt -> . ;
    (7) stmt -> . { stmts }
    (8) stmt -> . ID = expr ;
    (9) stmt -> . ID ADDASSIGN expr ;
    (10) stmt -> . ID SUBASSIGN expr ;
    (11) stmt -> . ID MULASSIGN expr ;
    (12) stmt -> . ID DIVASSIGN expr ;
    (44) stmt -> . WHILE ( cond ) stmt
    (45) stmt -> . FOR ID = expr : expr stmt
    (46) stmt -> . IF ( cond ) stmt
    (47) stmt -> . IF ( cond ) stmt ELSE stmt
    (48) stmt -> . BREAK ;
    (49) stmt -> . CONTINUE ;
    (50) stmt -> . RETURN expr ;
    (51) stmt -> . PRINT seq ;
    (52) stmt -> . ID list = expr

    $end            reduce using rule 3 (stmts_opt -> .)
    ;               shift and go to state 5
    {               shift and go to state 6
    ID              shift and go to state 7
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14

    program                        shift and go to state 1
    stmts_opt                      shift and go to state 2
    stmts                          shift and go to state 3
    stmt                           shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> stmts_opt .

    $end            reduce using rule 1 (program -> stmts_opt .)


state 3

    (2) stmts_opt -> stmts .
    (4) stmts -> stmts . stmt
    (6) stmt -> . ;
    (7) stmt -> . { stmts }
    (8) stmt -> . ID = expr ;
    (9) stmt -> . ID ADDASSIGN expr ;
    (10) stmt -> . ID SUBASSIGN expr ;
    (11) stmt -> . ID MULASSIGN expr ;
    (12) stmt -> . ID DIVASSIGN expr ;
    (44) stmt -> . WHILE ( cond ) stmt
    (45) stmt -> . FOR ID = expr : expr stmt
    (46) stmt -> . IF ( cond ) stmt
    (47) stmt -> . IF ( cond ) stmt ELSE stmt
    (48) stmt -> . BREAK ;
    (49) stmt -> . CONTINUE ;
    (50) stmt -> . RETURN expr ;
    (51) stmt -> . PRINT seq ;
    (52) stmt -> . ID list = expr

    $end            reduce using rule 2 (stmts_opt -> stmts .)
    ;               shift and go to state 5
    {               shift and go to state 6
    ID              shift and go to state 7
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14

    stmt                           shift and go to state 15

state 4

    (5) stmts -> stmt .

    ;               reduce using rule 5 (stmts -> stmt .)
    {               reduce using rule 5 (stmts -> stmt .)
    ID              reduce using rule 5 (stmts -> stmt .)
    WHILE           reduce using rule 5 (stmts -> stmt .)
    FOR             reduce using rule 5 (stmts -> stmt .)
    IF              reduce using rule 5 (stmts -> stmt .)
    BREAK           reduce using rule 5 (stmts -> stmt .)
    CONTINUE        reduce using rule 5 (stmts -> stmt .)
    RETURN          reduce using rule 5 (stmts -> stmt .)
    PRINT           reduce using rule 5 (stmts -> stmt .)
    $end            reduce using rule 5 (stmts -> stmt .)
    }               reduce using rule 5 (stmts -> stmt .)


state 5

    (6) stmt -> ; .

    ;               reduce using rule 6 (stmt -> ; .)
    {               reduce using rule 6 (stmt -> ; .)
    ID              reduce using rule 6 (stmt -> ; .)
    WHILE           reduce using rule 6 (stmt -> ; .)
    FOR             reduce using rule 6 (stmt -> ; .)
    IF              reduce using rule 6 (stmt -> ; .)
    BREAK           reduce using rule 6 (stmt -> ; .)
    CONTINUE        reduce using rule 6 (stmt -> ; .)
    RETURN          reduce using rule 6 (stmt -> ; .)
    PRINT           reduce using rule 6 (stmt -> ; .)
    $end            reduce using rule 6 (stmt -> ; .)
    }               reduce using rule 6 (stmt -> ; .)
    ELSE            reduce using rule 6 (stmt -> ; .)


state 6

    (7) stmt -> { . stmts }
    (4) stmts -> . stmts stmt
    (5) stmts -> . stmt
    (6) stmt -> . ;
    (7) stmt -> . { stmts }
    (8) stmt -> . ID = expr ;
    (9) stmt -> . ID ADDASSIGN expr ;
    (10) stmt -> . ID SUBASSIGN expr ;
    (11) stmt -> . ID MULASSIGN expr ;
    (12) stmt -> . ID DIVASSIGN expr ;
    (44) stmt -> . WHILE ( cond ) stmt
    (45) stmt -> . FOR ID = expr : expr stmt
    (46) stmt -> . IF ( cond ) stmt
    (47) stmt -> . IF ( cond ) stmt ELSE stmt
    (48) stmt -> . BREAK ;
    (49) stmt -> . CONTINUE ;
    (50) stmt -> . RETURN expr ;
    (51) stmt -> . PRINT seq ;
    (52) stmt -> . ID list = expr

    ;               shift and go to state 5
    {               shift and go to state 6
    ID              shift and go to state 7
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14

    stmts                          shift and go to state 16
    stmt                           shift and go to state 4

state 7

    (8) stmt -> ID . = expr ;
    (9) stmt -> ID . ADDASSIGN expr ;
    (10) stmt -> ID . SUBASSIGN expr ;
    (11) stmt -> ID . MULASSIGN expr ;
    (12) stmt -> ID . DIVASSIGN expr ;
    (52) stmt -> ID . list = expr
    (37) list -> . [ seq ]

    =               shift and go to state 17
    ADDASSIGN       shift and go to state 18
    SUBASSIGN       shift and go to state 19
    MULASSIGN       shift and go to state 20
    DIVASSIGN       shift and go to state 21
    [               shift and go to state 23

    list                           shift and go to state 22

state 8

    (44) stmt -> WHILE . ( cond ) stmt

    (               shift and go to state 24


state 9

    (45) stmt -> FOR . ID = expr : expr stmt

    ID              shift and go to state 25


state 10

    (46) stmt -> IF . ( cond ) stmt
    (47) stmt -> IF . ( cond ) stmt ELSE stmt

    (               shift and go to state 26


state 11

    (48) stmt -> BREAK . ;

    ;               shift and go to state 27


state 12

    (49) stmt -> CONTINUE . ;

    ;               shift and go to state 28


state 13

    (50) stmt -> RETURN . expr ;
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 29
    fun                            shift and go to state 37

state 14

    (51) stmt -> PRINT . seq ;
    (38) seq -> . expr
    (39) seq -> . seq , expr
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    seq                            shift and go to state 41
    expr                           shift and go to state 42
    fun                            shift and go to state 37

state 15

    (4) stmts -> stmts stmt .

    ;               reduce using rule 4 (stmts -> stmts stmt .)
    {               reduce using rule 4 (stmts -> stmts stmt .)
    ID              reduce using rule 4 (stmts -> stmts stmt .)
    WHILE           reduce using rule 4 (stmts -> stmts stmt .)
    FOR             reduce using rule 4 (stmts -> stmts stmt .)
    IF              reduce using rule 4 (stmts -> stmts stmt .)
    BREAK           reduce using rule 4 (stmts -> stmts stmt .)
    CONTINUE        reduce using rule 4 (stmts -> stmts stmt .)
    RETURN          reduce using rule 4 (stmts -> stmts stmt .)
    PRINT           reduce using rule 4 (stmts -> stmts stmt .)
    $end            reduce using rule 4 (stmts -> stmts stmt .)
    }               reduce using rule 4 (stmts -> stmts stmt .)


state 16

    (7) stmt -> { stmts . }
    (4) stmts -> stmts . stmt
    (6) stmt -> . ;
    (7) stmt -> . { stmts }
    (8) stmt -> . ID = expr ;
    (9) stmt -> . ID ADDASSIGN expr ;
    (10) stmt -> . ID SUBASSIGN expr ;
    (11) stmt -> . ID MULASSIGN expr ;
    (12) stmt -> . ID DIVASSIGN expr ;
    (44) stmt -> . WHILE ( cond ) stmt
    (45) stmt -> . FOR ID = expr : expr stmt
    (46) stmt -> . IF ( cond ) stmt
    (47) stmt -> . IF ( cond ) stmt ELSE stmt
    (48) stmt -> . BREAK ;
    (49) stmt -> . CONTINUE ;
    (50) stmt -> . RETURN expr ;
    (51) stmt -> . PRINT seq ;
    (52) stmt -> . ID list = expr

    }               shift and go to state 43
    ;               shift and go to state 5
    {               shift and go to state 6
    ID              shift and go to state 7
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14

    stmt                           shift and go to state 15

state 17

    (8) stmt -> ID = . expr ;
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 44
    fun                            shift and go to state 37

state 18

    (9) stmt -> ID ADDASSIGN . expr ;
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 45
    fun                            shift and go to state 37

state 19

    (10) stmt -> ID SUBASSIGN . expr ;
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 46
    fun                            shift and go to state 37

state 20

    (11) stmt -> ID MULASSIGN . expr ;
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 47
    fun                            shift and go to state 37

state 21

    (12) stmt -> ID DIVASSIGN . expr ;
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 48
    fun                            shift and go to state 37

state 22

    (52) stmt -> ID list . = expr

    =               shift and go to state 49


state 23

    (37) list -> [ . seq ]
    (38) seq -> . expr
    (39) seq -> . seq , expr
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    seq                            shift and go to state 50
    expr                           shift and go to state 42
    fun                            shift and go to state 37

state 24

    (44) stmt -> WHILE ( . cond ) stmt
    (28) cond -> . expr < expr
    (29) cond -> . expr > expr
    (30) cond -> . expr LE expr
    (31) cond -> . expr GE expr
    (32) cond -> . expr EQ expr
    (33) cond -> . expr NEQ expr
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    cond                           shift and go to state 51
    expr                           shift and go to state 52
    fun                            shift and go to state 37

state 25

    (45) stmt -> FOR ID . = expr : expr stmt

    =               shift and go to state 53


state 26

    (46) stmt -> IF ( . cond ) stmt
    (47) stmt -> IF ( . cond ) stmt ELSE stmt
    (28) cond -> . expr < expr
    (29) cond -> . expr > expr
    (30) cond -> . expr LE expr
    (31) cond -> . expr GE expr
    (32) cond -> . expr EQ expr
    (33) cond -> . expr NEQ expr
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    cond                           shift and go to state 54
    expr                           shift and go to state 52
    fun                            shift and go to state 37

state 27

    (48) stmt -> BREAK ; .

    ;               reduce using rule 48 (stmt -> BREAK ; .)
    {               reduce using rule 48 (stmt -> BREAK ; .)
    ID              reduce using rule 48 (stmt -> BREAK ; .)
    WHILE           reduce using rule 48 (stmt -> BREAK ; .)
    FOR             reduce using rule 48 (stmt -> BREAK ; .)
    IF              reduce using rule 48 (stmt -> BREAK ; .)
    BREAK           reduce using rule 48 (stmt -> BREAK ; .)
    CONTINUE        reduce using rule 48 (stmt -> BREAK ; .)
    RETURN          reduce using rule 48 (stmt -> BREAK ; .)
    PRINT           reduce using rule 48 (stmt -> BREAK ; .)
    $end            reduce using rule 48 (stmt -> BREAK ; .)
    }               reduce using rule 48 (stmt -> BREAK ; .)
    ELSE            reduce using rule 48 (stmt -> BREAK ; .)


state 28

    (49) stmt -> CONTINUE ; .

    ;               reduce using rule 49 (stmt -> CONTINUE ; .)
    {               reduce using rule 49 (stmt -> CONTINUE ; .)
    ID              reduce using rule 49 (stmt -> CONTINUE ; .)
    WHILE           reduce using rule 49 (stmt -> CONTINUE ; .)
    FOR             reduce using rule 49 (stmt -> CONTINUE ; .)
    IF              reduce using rule 49 (stmt -> CONTINUE ; .)
    BREAK           reduce using rule 49 (stmt -> CONTINUE ; .)
    CONTINUE        reduce using rule 49 (stmt -> CONTINUE ; .)
    RETURN          reduce using rule 49 (stmt -> CONTINUE ; .)
    PRINT           reduce using rule 49 (stmt -> CONTINUE ; .)
    $end            reduce using rule 49 (stmt -> CONTINUE ; .)
    }               reduce using rule 49 (stmt -> CONTINUE ; .)
    ELSE            reduce using rule 49 (stmt -> CONTINUE ; .)


state 29

    (50) stmt -> RETURN expr . ;
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    ;               shift and go to state 55
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63
    '               shift and go to state 64


state 30

    (26) expr -> - . expr
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 65
    fun                            shift and go to state 37

state 31

    (21) expr -> FLOATNUM .

    ;               reduce using rule 21 (expr -> FLOATNUM .)
    +               reduce using rule 21 (expr -> FLOATNUM .)
    -               reduce using rule 21 (expr -> FLOATNUM .)
    *               reduce using rule 21 (expr -> FLOATNUM .)
    /               reduce using rule 21 (expr -> FLOATNUM .)
    DOTADD          reduce using rule 21 (expr -> FLOATNUM .)
    DOTSUB          reduce using rule 21 (expr -> FLOATNUM .)
    DOTMUL          reduce using rule 21 (expr -> FLOATNUM .)
    DOTDIV          reduce using rule 21 (expr -> FLOATNUM .)
    '               reduce using rule 21 (expr -> FLOATNUM .)
    ,               reduce using rule 21 (expr -> FLOATNUM .)
    ]               reduce using rule 21 (expr -> FLOATNUM .)
    <               reduce using rule 21 (expr -> FLOATNUM .)
    >               reduce using rule 21 (expr -> FLOATNUM .)
    LE              reduce using rule 21 (expr -> FLOATNUM .)
    GE              reduce using rule 21 (expr -> FLOATNUM .)
    EQ              reduce using rule 21 (expr -> FLOATNUM .)
    NEQ             reduce using rule 21 (expr -> FLOATNUM .)
    )               reduce using rule 21 (expr -> FLOATNUM .)
    {               reduce using rule 21 (expr -> FLOATNUM .)
    ID              reduce using rule 21 (expr -> FLOATNUM .)
    WHILE           reduce using rule 21 (expr -> FLOATNUM .)
    FOR             reduce using rule 21 (expr -> FLOATNUM .)
    IF              reduce using rule 21 (expr -> FLOATNUM .)
    BREAK           reduce using rule 21 (expr -> FLOATNUM .)
    CONTINUE        reduce using rule 21 (expr -> FLOATNUM .)
    RETURN          reduce using rule 21 (expr -> FLOATNUM .)
    PRINT           reduce using rule 21 (expr -> FLOATNUM .)
    $end            reduce using rule 21 (expr -> FLOATNUM .)
    }               reduce using rule 21 (expr -> FLOATNUM .)
    ELSE            reduce using rule 21 (expr -> FLOATNUM .)
    :               reduce using rule 21 (expr -> FLOATNUM .)


state 32

    (22) expr -> INTNUM .

    ;               reduce using rule 22 (expr -> INTNUM .)
    +               reduce using rule 22 (expr -> INTNUM .)
    -               reduce using rule 22 (expr -> INTNUM .)
    *               reduce using rule 22 (expr -> INTNUM .)
    /               reduce using rule 22 (expr -> INTNUM .)
    DOTADD          reduce using rule 22 (expr -> INTNUM .)
    DOTSUB          reduce using rule 22 (expr -> INTNUM .)
    DOTMUL          reduce using rule 22 (expr -> INTNUM .)
    DOTDIV          reduce using rule 22 (expr -> INTNUM .)
    '               reduce using rule 22 (expr -> INTNUM .)
    ,               reduce using rule 22 (expr -> INTNUM .)
    ]               reduce using rule 22 (expr -> INTNUM .)
    <               reduce using rule 22 (expr -> INTNUM .)
    >               reduce using rule 22 (expr -> INTNUM .)
    LE              reduce using rule 22 (expr -> INTNUM .)
    GE              reduce using rule 22 (expr -> INTNUM .)
    EQ              reduce using rule 22 (expr -> INTNUM .)
    NEQ             reduce using rule 22 (expr -> INTNUM .)
    )               reduce using rule 22 (expr -> INTNUM .)
    {               reduce using rule 22 (expr -> INTNUM .)
    ID              reduce using rule 22 (expr -> INTNUM .)
    WHILE           reduce using rule 22 (expr -> INTNUM .)
    FOR             reduce using rule 22 (expr -> INTNUM .)
    IF              reduce using rule 22 (expr -> INTNUM .)
    BREAK           reduce using rule 22 (expr -> INTNUM .)
    CONTINUE        reduce using rule 22 (expr -> INTNUM .)
    RETURN          reduce using rule 22 (expr -> INTNUM .)
    PRINT           reduce using rule 22 (expr -> INTNUM .)
    $end            reduce using rule 22 (expr -> INTNUM .)
    }               reduce using rule 22 (expr -> INTNUM .)
    ELSE            reduce using rule 22 (expr -> INTNUM .)
    :               reduce using rule 22 (expr -> INTNUM .)


state 33

    (23) expr -> ID .

    ;               reduce using rule 23 (expr -> ID .)
    +               reduce using rule 23 (expr -> ID .)
    -               reduce using rule 23 (expr -> ID .)
    *               reduce using rule 23 (expr -> ID .)
    /               reduce using rule 23 (expr -> ID .)
    DOTADD          reduce using rule 23 (expr -> ID .)
    DOTSUB          reduce using rule 23 (expr -> ID .)
    DOTMUL          reduce using rule 23 (expr -> ID .)
    DOTDIV          reduce using rule 23 (expr -> ID .)
    '               reduce using rule 23 (expr -> ID .)
    ,               reduce using rule 23 (expr -> ID .)
    ]               reduce using rule 23 (expr -> ID .)
    <               reduce using rule 23 (expr -> ID .)
    >               reduce using rule 23 (expr -> ID .)
    LE              reduce using rule 23 (expr -> ID .)
    GE              reduce using rule 23 (expr -> ID .)
    EQ              reduce using rule 23 (expr -> ID .)
    NEQ             reduce using rule 23 (expr -> ID .)
    )               reduce using rule 23 (expr -> ID .)
    {               reduce using rule 23 (expr -> ID .)
    ID              reduce using rule 23 (expr -> ID .)
    WHILE           reduce using rule 23 (expr -> ID .)
    FOR             reduce using rule 23 (expr -> ID .)
    IF              reduce using rule 23 (expr -> ID .)
    BREAK           reduce using rule 23 (expr -> ID .)
    CONTINUE        reduce using rule 23 (expr -> ID .)
    RETURN          reduce using rule 23 (expr -> ID .)
    PRINT           reduce using rule 23 (expr -> ID .)
    $end            reduce using rule 23 (expr -> ID .)
    }               reduce using rule 23 (expr -> ID .)
    ELSE            reduce using rule 23 (expr -> ID .)
    :               reduce using rule 23 (expr -> ID .)


state 34

    (24) expr -> STR .

    ;               reduce using rule 24 (expr -> STR .)
    +               reduce using rule 24 (expr -> STR .)
    -               reduce using rule 24 (expr -> STR .)
    *               reduce using rule 24 (expr -> STR .)
    /               reduce using rule 24 (expr -> STR .)
    DOTADD          reduce using rule 24 (expr -> STR .)
    DOTSUB          reduce using rule 24 (expr -> STR .)
    DOTMUL          reduce using rule 24 (expr -> STR .)
    DOTDIV          reduce using rule 24 (expr -> STR .)
    '               reduce using rule 24 (expr -> STR .)
    ,               reduce using rule 24 (expr -> STR .)
    ]               reduce using rule 24 (expr -> STR .)
    <               reduce using rule 24 (expr -> STR .)
    >               reduce using rule 24 (expr -> STR .)
    LE              reduce using rule 24 (expr -> STR .)
    GE              reduce using rule 24 (expr -> STR .)
    EQ              reduce using rule 24 (expr -> STR .)
    NEQ             reduce using rule 24 (expr -> STR .)
    )               reduce using rule 24 (expr -> STR .)
    {               reduce using rule 24 (expr -> STR .)
    ID              reduce using rule 24 (expr -> STR .)
    WHILE           reduce using rule 24 (expr -> STR .)
    FOR             reduce using rule 24 (expr -> STR .)
    IF              reduce using rule 24 (expr -> STR .)
    BREAK           reduce using rule 24 (expr -> STR .)
    CONTINUE        reduce using rule 24 (expr -> STR .)
    RETURN          reduce using rule 24 (expr -> STR .)
    PRINT           reduce using rule 24 (expr -> STR .)
    $end            reduce using rule 24 (expr -> STR .)
    }               reduce using rule 24 (expr -> STR .)
    ELSE            reduce using rule 24 (expr -> STR .)
    :               reduce using rule 24 (expr -> STR .)


state 35

    (25) expr -> ( . expr )
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 66
    fun                            shift and go to state 37

state 36

    (34) expr -> [ . lists ]
    (35) lists -> . list
    (36) lists -> . lists , list
    (37) list -> . [ seq ]

    [               shift and go to state 23

    lists                          shift and go to state 67
    list                           shift and go to state 68

state 37

    (43) expr -> fun . ( expr )

    (               shift and go to state 69


state 38

    (40) fun -> ZEROS .

    (               reduce using rule 40 (fun -> ZEROS .)


state 39

    (41) fun -> EYE .

    (               reduce using rule 41 (fun -> EYE .)


state 40

    (42) fun -> ONES .

    (               reduce using rule 42 (fun -> ONES .)


state 41

    (51) stmt -> PRINT seq . ;
    (39) seq -> seq . , expr

    ;               shift and go to state 70
    ,               shift and go to state 71


state 42

    (38) seq -> expr .
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    ;               reduce using rule 38 (seq -> expr .)
    ,               reduce using rule 38 (seq -> expr .)
    ]               reduce using rule 38 (seq -> expr .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63
    '               shift and go to state 64


state 43

    (7) stmt -> { stmts } .

    ;               reduce using rule 7 (stmt -> { stmts } .)
    {               reduce using rule 7 (stmt -> { stmts } .)
    ID              reduce using rule 7 (stmt -> { stmts } .)
    WHILE           reduce using rule 7 (stmt -> { stmts } .)
    FOR             reduce using rule 7 (stmt -> { stmts } .)
    IF              reduce using rule 7 (stmt -> { stmts } .)
    BREAK           reduce using rule 7 (stmt -> { stmts } .)
    CONTINUE        reduce using rule 7 (stmt -> { stmts } .)
    RETURN          reduce using rule 7 (stmt -> { stmts } .)
    PRINT           reduce using rule 7 (stmt -> { stmts } .)
    $end            reduce using rule 7 (stmt -> { stmts } .)
    }               reduce using rule 7 (stmt -> { stmts } .)
    ELSE            reduce using rule 7 (stmt -> { stmts } .)


state 44

    (8) stmt -> ID = expr . ;
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    ;               shift and go to state 72
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63
    '               shift and go to state 64


state 45

    (9) stmt -> ID ADDASSIGN expr . ;
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    ;               shift and go to state 73
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63
    '               shift and go to state 64


state 46

    (10) stmt -> ID SUBASSIGN expr . ;
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    ;               shift and go to state 74
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63
    '               shift and go to state 64


state 47

    (11) stmt -> ID MULASSIGN expr . ;
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    ;               shift and go to state 75
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63
    '               shift and go to state 64


state 48

    (12) stmt -> ID DIVASSIGN expr . ;
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    ;               shift and go to state 76
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63
    '               shift and go to state 64


state 49

    (52) stmt -> ID list = . expr
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 77
    fun                            shift and go to state 37

state 50

    (37) list -> [ seq . ]
    (39) seq -> seq . , expr

    ]               shift and go to state 78
    ,               shift and go to state 71


state 51

    (44) stmt -> WHILE ( cond . ) stmt

    )               shift and go to state 79


state 52

    (28) cond -> expr . < expr
    (29) cond -> expr . > expr
    (30) cond -> expr . LE expr
    (31) cond -> expr . GE expr
    (32) cond -> expr . EQ expr
    (33) cond -> expr . NEQ expr
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    <               shift and go to state 80
    >               shift and go to state 81
    LE              shift and go to state 82
    GE              shift and go to state 83
    EQ              shift and go to state 84
    NEQ             shift and go to state 85
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63
    '               shift and go to state 64


state 53

    (45) stmt -> FOR ID = . expr : expr stmt
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 86
    fun                            shift and go to state 37

state 54

    (46) stmt -> IF ( cond . ) stmt
    (47) stmt -> IF ( cond . ) stmt ELSE stmt

    )               shift and go to state 87


state 55

    (50) stmt -> RETURN expr ; .

    ;               reduce using rule 50 (stmt -> RETURN expr ; .)
    {               reduce using rule 50 (stmt -> RETURN expr ; .)
    ID              reduce using rule 50 (stmt -> RETURN expr ; .)
    WHILE           reduce using rule 50 (stmt -> RETURN expr ; .)
    FOR             reduce using rule 50 (stmt -> RETURN expr ; .)
    IF              reduce using rule 50 (stmt -> RETURN expr ; .)
    BREAK           reduce using rule 50 (stmt -> RETURN expr ; .)
    CONTINUE        reduce using rule 50 (stmt -> RETURN expr ; .)
    RETURN          reduce using rule 50 (stmt -> RETURN expr ; .)
    PRINT           reduce using rule 50 (stmt -> RETURN expr ; .)
    $end            reduce using rule 50 (stmt -> RETURN expr ; .)
    }               reduce using rule 50 (stmt -> RETURN expr ; .)
    ELSE            reduce using rule 50 (stmt -> RETURN expr ; .)


state 56

    (13) expr -> expr + . expr
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 88
    fun                            shift and go to state 37

state 57

    (14) expr -> expr - . expr
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 89
    fun                            shift and go to state 37

state 58

    (15) expr -> expr * . expr
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 90
    fun                            shift and go to state 37

state 59

    (16) expr -> expr / . expr
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 91
    fun                            shift and go to state 37

state 60

    (17) expr -> expr DOTADD . expr
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 92
    fun                            shift and go to state 37

state 61

    (18) expr -> expr DOTSUB . expr
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 93
    fun                            shift and go to state 37

state 62

    (19) expr -> expr DOTMUL . expr
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 94
    fun                            shift and go to state 37

state 63

    (20) expr -> expr DOTDIV . expr
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 95
    fun                            shift and go to state 37

state 64

    (27) expr -> expr ' .

    ;               reduce using rule 27 (expr -> expr ' .)
    +               reduce using rule 27 (expr -> expr ' .)
    -               reduce using rule 27 (expr -> expr ' .)
    *               reduce using rule 27 (expr -> expr ' .)
    /               reduce using rule 27 (expr -> expr ' .)
    DOTADD          reduce using rule 27 (expr -> expr ' .)
    DOTSUB          reduce using rule 27 (expr -> expr ' .)
    DOTMUL          reduce using rule 27 (expr -> expr ' .)
    DOTDIV          reduce using rule 27 (expr -> expr ' .)
    '               reduce using rule 27 (expr -> expr ' .)
    ,               reduce using rule 27 (expr -> expr ' .)
    ]               reduce using rule 27 (expr -> expr ' .)
    <               reduce using rule 27 (expr -> expr ' .)
    >               reduce using rule 27 (expr -> expr ' .)
    LE              reduce using rule 27 (expr -> expr ' .)
    GE              reduce using rule 27 (expr -> expr ' .)
    EQ              reduce using rule 27 (expr -> expr ' .)
    NEQ             reduce using rule 27 (expr -> expr ' .)
    )               reduce using rule 27 (expr -> expr ' .)
    {               reduce using rule 27 (expr -> expr ' .)
    ID              reduce using rule 27 (expr -> expr ' .)
    WHILE           reduce using rule 27 (expr -> expr ' .)
    FOR             reduce using rule 27 (expr -> expr ' .)
    IF              reduce using rule 27 (expr -> expr ' .)
    BREAK           reduce using rule 27 (expr -> expr ' .)
    CONTINUE        reduce using rule 27 (expr -> expr ' .)
    RETURN          reduce using rule 27 (expr -> expr ' .)
    PRINT           reduce using rule 27 (expr -> expr ' .)
    $end            reduce using rule 27 (expr -> expr ' .)
    }               reduce using rule 27 (expr -> expr ' .)
    ELSE            reduce using rule 27 (expr -> expr ' .)
    :               reduce using rule 27 (expr -> expr ' .)


state 65

    (26) expr -> - expr .
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    ;               reduce using rule 26 (expr -> - expr .)
    +               reduce using rule 26 (expr -> - expr .)
    -               reduce using rule 26 (expr -> - expr .)
    *               reduce using rule 26 (expr -> - expr .)
    /               reduce using rule 26 (expr -> - expr .)
    DOTADD          reduce using rule 26 (expr -> - expr .)
    DOTSUB          reduce using rule 26 (expr -> - expr .)
    DOTMUL          reduce using rule 26 (expr -> - expr .)
    DOTDIV          reduce using rule 26 (expr -> - expr .)
    '               reduce using rule 26 (expr -> - expr .)
    ,               reduce using rule 26 (expr -> - expr .)
    ]               reduce using rule 26 (expr -> - expr .)
    <               reduce using rule 26 (expr -> - expr .)
    >               reduce using rule 26 (expr -> - expr .)
    LE              reduce using rule 26 (expr -> - expr .)
    GE              reduce using rule 26 (expr -> - expr .)
    EQ              reduce using rule 26 (expr -> - expr .)
    NEQ             reduce using rule 26 (expr -> - expr .)
    )               reduce using rule 26 (expr -> - expr .)
    {               reduce using rule 26 (expr -> - expr .)
    ID              reduce using rule 26 (expr -> - expr .)
    WHILE           reduce using rule 26 (expr -> - expr .)
    FOR             reduce using rule 26 (expr -> - expr .)
    IF              reduce using rule 26 (expr -> - expr .)
    BREAK           reduce using rule 26 (expr -> - expr .)
    CONTINUE        reduce using rule 26 (expr -> - expr .)
    RETURN          reduce using rule 26 (expr -> - expr .)
    PRINT           reduce using rule 26 (expr -> - expr .)
    $end            reduce using rule 26 (expr -> - expr .)
    }               reduce using rule 26 (expr -> - expr .)
    ELSE            reduce using rule 26 (expr -> - expr .)
    :               reduce using rule 26 (expr -> - expr .)

  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 57 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 59 ]
  ! DOTADD          [ shift and go to state 60 ]
  ! DOTSUB          [ shift and go to state 61 ]
  ! DOTMUL          [ shift and go to state 62 ]
  ! DOTDIV          [ shift and go to state 63 ]
  ! '               [ shift and go to state 64 ]


state 66

    (25) expr -> ( expr . )
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    )               shift and go to state 96
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63
    '               shift and go to state 64


state 67

    (34) expr -> [ lists . ]
    (36) lists -> lists . , list

    ]               shift and go to state 97
    ,               shift and go to state 98


state 68

    (35) lists -> list .

    ]               reduce using rule 35 (lists -> list .)
    ,               reduce using rule 35 (lists -> list .)


state 69

    (43) expr -> fun ( . expr )
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    fun                            shift and go to state 37
    expr                           shift and go to state 99

state 70

    (51) stmt -> PRINT seq ; .

    ;               reduce using rule 51 (stmt -> PRINT seq ; .)
    {               reduce using rule 51 (stmt -> PRINT seq ; .)
    ID              reduce using rule 51 (stmt -> PRINT seq ; .)
    WHILE           reduce using rule 51 (stmt -> PRINT seq ; .)
    FOR             reduce using rule 51 (stmt -> PRINT seq ; .)
    IF              reduce using rule 51 (stmt -> PRINT seq ; .)
    BREAK           reduce using rule 51 (stmt -> PRINT seq ; .)
    CONTINUE        reduce using rule 51 (stmt -> PRINT seq ; .)
    RETURN          reduce using rule 51 (stmt -> PRINT seq ; .)
    PRINT           reduce using rule 51 (stmt -> PRINT seq ; .)
    $end            reduce using rule 51 (stmt -> PRINT seq ; .)
    }               reduce using rule 51 (stmt -> PRINT seq ; .)
    ELSE            reduce using rule 51 (stmt -> PRINT seq ; .)


state 71

    (39) seq -> seq , . expr
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 100
    fun                            shift and go to state 37

state 72

    (8) stmt -> ID = expr ; .

    ;               reduce using rule 8 (stmt -> ID = expr ; .)
    {               reduce using rule 8 (stmt -> ID = expr ; .)
    ID              reduce using rule 8 (stmt -> ID = expr ; .)
    WHILE           reduce using rule 8 (stmt -> ID = expr ; .)
    FOR             reduce using rule 8 (stmt -> ID = expr ; .)
    IF              reduce using rule 8 (stmt -> ID = expr ; .)
    BREAK           reduce using rule 8 (stmt -> ID = expr ; .)
    CONTINUE        reduce using rule 8 (stmt -> ID = expr ; .)
    RETURN          reduce using rule 8 (stmt -> ID = expr ; .)
    PRINT           reduce using rule 8 (stmt -> ID = expr ; .)
    $end            reduce using rule 8 (stmt -> ID = expr ; .)
    }               reduce using rule 8 (stmt -> ID = expr ; .)
    ELSE            reduce using rule 8 (stmt -> ID = expr ; .)


state 73

    (9) stmt -> ID ADDASSIGN expr ; .

    ;               reduce using rule 9 (stmt -> ID ADDASSIGN expr ; .)
    {               reduce using rule 9 (stmt -> ID ADDASSIGN expr ; .)
    ID              reduce using rule 9 (stmt -> ID ADDASSIGN expr ; .)
    WHILE           reduce using rule 9 (stmt -> ID ADDASSIGN expr ; .)
    FOR             reduce using rule 9 (stmt -> ID ADDASSIGN expr ; .)
    IF              reduce using rule 9 (stmt -> ID ADDASSIGN expr ; .)
    BREAK           reduce using rule 9 (stmt -> ID ADDASSIGN expr ; .)
    CONTINUE        reduce using rule 9 (stmt -> ID ADDASSIGN expr ; .)
    RETURN          reduce using rule 9 (stmt -> ID ADDASSIGN expr ; .)
    PRINT           reduce using rule 9 (stmt -> ID ADDASSIGN expr ; .)
    $end            reduce using rule 9 (stmt -> ID ADDASSIGN expr ; .)
    }               reduce using rule 9 (stmt -> ID ADDASSIGN expr ; .)
    ELSE            reduce using rule 9 (stmt -> ID ADDASSIGN expr ; .)


state 74

    (10) stmt -> ID SUBASSIGN expr ; .

    ;               reduce using rule 10 (stmt -> ID SUBASSIGN expr ; .)
    {               reduce using rule 10 (stmt -> ID SUBASSIGN expr ; .)
    ID              reduce using rule 10 (stmt -> ID SUBASSIGN expr ; .)
    WHILE           reduce using rule 10 (stmt -> ID SUBASSIGN expr ; .)
    FOR             reduce using rule 10 (stmt -> ID SUBASSIGN expr ; .)
    IF              reduce using rule 10 (stmt -> ID SUBASSIGN expr ; .)
    BREAK           reduce using rule 10 (stmt -> ID SUBASSIGN expr ; .)
    CONTINUE        reduce using rule 10 (stmt -> ID SUBASSIGN expr ; .)
    RETURN          reduce using rule 10 (stmt -> ID SUBASSIGN expr ; .)
    PRINT           reduce using rule 10 (stmt -> ID SUBASSIGN expr ; .)
    $end            reduce using rule 10 (stmt -> ID SUBASSIGN expr ; .)
    }               reduce using rule 10 (stmt -> ID SUBASSIGN expr ; .)
    ELSE            reduce using rule 10 (stmt -> ID SUBASSIGN expr ; .)


state 75

    (11) stmt -> ID MULASSIGN expr ; .

    ;               reduce using rule 11 (stmt -> ID MULASSIGN expr ; .)
    {               reduce using rule 11 (stmt -> ID MULASSIGN expr ; .)
    ID              reduce using rule 11 (stmt -> ID MULASSIGN expr ; .)
    WHILE           reduce using rule 11 (stmt -> ID MULASSIGN expr ; .)
    FOR             reduce using rule 11 (stmt -> ID MULASSIGN expr ; .)
    IF              reduce using rule 11 (stmt -> ID MULASSIGN expr ; .)
    BREAK           reduce using rule 11 (stmt -> ID MULASSIGN expr ; .)
    CONTINUE        reduce using rule 11 (stmt -> ID MULASSIGN expr ; .)
    RETURN          reduce using rule 11 (stmt -> ID MULASSIGN expr ; .)
    PRINT           reduce using rule 11 (stmt -> ID MULASSIGN expr ; .)
    $end            reduce using rule 11 (stmt -> ID MULASSIGN expr ; .)
    }               reduce using rule 11 (stmt -> ID MULASSIGN expr ; .)
    ELSE            reduce using rule 11 (stmt -> ID MULASSIGN expr ; .)


state 76

    (12) stmt -> ID DIVASSIGN expr ; .

    ;               reduce using rule 12 (stmt -> ID DIVASSIGN expr ; .)
    {               reduce using rule 12 (stmt -> ID DIVASSIGN expr ; .)
    ID              reduce using rule 12 (stmt -> ID DIVASSIGN expr ; .)
    WHILE           reduce using rule 12 (stmt -> ID DIVASSIGN expr ; .)
    FOR             reduce using rule 12 (stmt -> ID DIVASSIGN expr ; .)
    IF              reduce using rule 12 (stmt -> ID DIVASSIGN expr ; .)
    BREAK           reduce using rule 12 (stmt -> ID DIVASSIGN expr ; .)
    CONTINUE        reduce using rule 12 (stmt -> ID DIVASSIGN expr ; .)
    RETURN          reduce using rule 12 (stmt -> ID DIVASSIGN expr ; .)
    PRINT           reduce using rule 12 (stmt -> ID DIVASSIGN expr ; .)
    $end            reduce using rule 12 (stmt -> ID DIVASSIGN expr ; .)
    }               reduce using rule 12 (stmt -> ID DIVASSIGN expr ; .)
    ELSE            reduce using rule 12 (stmt -> ID DIVASSIGN expr ; .)


state 77

    (52) stmt -> ID list = expr .
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    ;               reduce using rule 52 (stmt -> ID list = expr .)
    {               reduce using rule 52 (stmt -> ID list = expr .)
    ID              reduce using rule 52 (stmt -> ID list = expr .)
    WHILE           reduce using rule 52 (stmt -> ID list = expr .)
    FOR             reduce using rule 52 (stmt -> ID list = expr .)
    IF              reduce using rule 52 (stmt -> ID list = expr .)
    BREAK           reduce using rule 52 (stmt -> ID list = expr .)
    CONTINUE        reduce using rule 52 (stmt -> ID list = expr .)
    RETURN          reduce using rule 52 (stmt -> ID list = expr .)
    PRINT           reduce using rule 52 (stmt -> ID list = expr .)
    $end            reduce using rule 52 (stmt -> ID list = expr .)
    }               reduce using rule 52 (stmt -> ID list = expr .)
    ELSE            reduce using rule 52 (stmt -> ID list = expr .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63
    '               shift and go to state 64


state 78

    (37) list -> [ seq ] .

    =               reduce using rule 37 (list -> [ seq ] .)
    ]               reduce using rule 37 (list -> [ seq ] .)
    ,               reduce using rule 37 (list -> [ seq ] .)


state 79

    (44) stmt -> WHILE ( cond ) . stmt
    (6) stmt -> . ;
    (7) stmt -> . { stmts }
    (8) stmt -> . ID = expr ;
    (9) stmt -> . ID ADDASSIGN expr ;
    (10) stmt -> . ID SUBASSIGN expr ;
    (11) stmt -> . ID MULASSIGN expr ;
    (12) stmt -> . ID DIVASSIGN expr ;
    (44) stmt -> . WHILE ( cond ) stmt
    (45) stmt -> . FOR ID = expr : expr stmt
    (46) stmt -> . IF ( cond ) stmt
    (47) stmt -> . IF ( cond ) stmt ELSE stmt
    (48) stmt -> . BREAK ;
    (49) stmt -> . CONTINUE ;
    (50) stmt -> . RETURN expr ;
    (51) stmt -> . PRINT seq ;
    (52) stmt -> . ID list = expr

    ;               shift and go to state 5
    {               shift and go to state 6
    ID              shift and go to state 7
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14

    stmt                           shift and go to state 101

state 80

    (28) cond -> expr < . expr
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 102
    fun                            shift and go to state 37

state 81

    (29) cond -> expr > . expr
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 103
    fun                            shift and go to state 37

state 82

    (30) cond -> expr LE . expr
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 104
    fun                            shift and go to state 37

state 83

    (31) cond -> expr GE . expr
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 105
    fun                            shift and go to state 37

state 84

    (32) cond -> expr EQ . expr
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 106
    fun                            shift and go to state 37

state 85

    (33) cond -> expr NEQ . expr
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 107
    fun                            shift and go to state 37

state 86

    (45) stmt -> FOR ID = expr . : expr stmt
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    :               shift and go to state 108
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63
    '               shift and go to state 64


state 87

    (46) stmt -> IF ( cond ) . stmt
    (47) stmt -> IF ( cond ) . stmt ELSE stmt
    (6) stmt -> . ;
    (7) stmt -> . { stmts }
    (8) stmt -> . ID = expr ;
    (9) stmt -> . ID ADDASSIGN expr ;
    (10) stmt -> . ID SUBASSIGN expr ;
    (11) stmt -> . ID MULASSIGN expr ;
    (12) stmt -> . ID DIVASSIGN expr ;
    (44) stmt -> . WHILE ( cond ) stmt
    (45) stmt -> . FOR ID = expr : expr stmt
    (46) stmt -> . IF ( cond ) stmt
    (47) stmt -> . IF ( cond ) stmt ELSE stmt
    (48) stmt -> . BREAK ;
    (49) stmt -> . CONTINUE ;
    (50) stmt -> . RETURN expr ;
    (51) stmt -> . PRINT seq ;
    (52) stmt -> . ID list = expr

    ;               shift and go to state 5
    {               shift and go to state 6
    ID              shift and go to state 7
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14

    stmt                           shift and go to state 109

state 88

    (13) expr -> expr + expr .
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    ;               reduce using rule 13 (expr -> expr + expr .)
    +               reduce using rule 13 (expr -> expr + expr .)
    -               reduce using rule 13 (expr -> expr + expr .)
    '               reduce using rule 13 (expr -> expr + expr .)
    ,               reduce using rule 13 (expr -> expr + expr .)
    ]               reduce using rule 13 (expr -> expr + expr .)
    <               reduce using rule 13 (expr -> expr + expr .)
    >               reduce using rule 13 (expr -> expr + expr .)
    LE              reduce using rule 13 (expr -> expr + expr .)
    GE              reduce using rule 13 (expr -> expr + expr .)
    EQ              reduce using rule 13 (expr -> expr + expr .)
    NEQ             reduce using rule 13 (expr -> expr + expr .)
    )               reduce using rule 13 (expr -> expr + expr .)
    {               reduce using rule 13 (expr -> expr + expr .)
    ID              reduce using rule 13 (expr -> expr + expr .)
    WHILE           reduce using rule 13 (expr -> expr + expr .)
    FOR             reduce using rule 13 (expr -> expr + expr .)
    IF              reduce using rule 13 (expr -> expr + expr .)
    BREAK           reduce using rule 13 (expr -> expr + expr .)
    CONTINUE        reduce using rule 13 (expr -> expr + expr .)
    RETURN          reduce using rule 13 (expr -> expr + expr .)
    PRINT           reduce using rule 13 (expr -> expr + expr .)
    $end            reduce using rule 13 (expr -> expr + expr .)
    }               reduce using rule 13 (expr -> expr + expr .)
    ELSE            reduce using rule 13 (expr -> expr + expr .)
    :               reduce using rule 13 (expr -> expr + expr .)
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63

  ! *               [ reduce using rule 13 (expr -> expr + expr .) ]
  ! /               [ reduce using rule 13 (expr -> expr + expr .) ]
  ! DOTADD          [ reduce using rule 13 (expr -> expr + expr .) ]
  ! DOTSUB          [ reduce using rule 13 (expr -> expr + expr .) ]
  ! DOTMUL          [ reduce using rule 13 (expr -> expr + expr .) ]
  ! DOTDIV          [ reduce using rule 13 (expr -> expr + expr .) ]
  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 57 ]
  ! '               [ shift and go to state 64 ]


state 89

    (14) expr -> expr - expr .
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    ;               reduce using rule 14 (expr -> expr - expr .)
    +               reduce using rule 14 (expr -> expr - expr .)
    -               reduce using rule 14 (expr -> expr - expr .)
    '               reduce using rule 14 (expr -> expr - expr .)
    ,               reduce using rule 14 (expr -> expr - expr .)
    ]               reduce using rule 14 (expr -> expr - expr .)
    <               reduce using rule 14 (expr -> expr - expr .)
    >               reduce using rule 14 (expr -> expr - expr .)
    LE              reduce using rule 14 (expr -> expr - expr .)
    GE              reduce using rule 14 (expr -> expr - expr .)
    EQ              reduce using rule 14 (expr -> expr - expr .)
    NEQ             reduce using rule 14 (expr -> expr - expr .)
    )               reduce using rule 14 (expr -> expr - expr .)
    {               reduce using rule 14 (expr -> expr - expr .)
    ID              reduce using rule 14 (expr -> expr - expr .)
    WHILE           reduce using rule 14 (expr -> expr - expr .)
    FOR             reduce using rule 14 (expr -> expr - expr .)
    IF              reduce using rule 14 (expr -> expr - expr .)
    BREAK           reduce using rule 14 (expr -> expr - expr .)
    CONTINUE        reduce using rule 14 (expr -> expr - expr .)
    RETURN          reduce using rule 14 (expr -> expr - expr .)
    PRINT           reduce using rule 14 (expr -> expr - expr .)
    $end            reduce using rule 14 (expr -> expr - expr .)
    }               reduce using rule 14 (expr -> expr - expr .)
    ELSE            reduce using rule 14 (expr -> expr - expr .)
    :               reduce using rule 14 (expr -> expr - expr .)
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63

  ! *               [ reduce using rule 14 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 14 (expr -> expr - expr .) ]
  ! DOTADD          [ reduce using rule 14 (expr -> expr - expr .) ]
  ! DOTSUB          [ reduce using rule 14 (expr -> expr - expr .) ]
  ! DOTMUL          [ reduce using rule 14 (expr -> expr - expr .) ]
  ! DOTDIV          [ reduce using rule 14 (expr -> expr - expr .) ]
  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 57 ]
  ! '               [ shift and go to state 64 ]


state 90

    (15) expr -> expr * expr .
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    ;               reduce using rule 15 (expr -> expr * expr .)
    +               reduce using rule 15 (expr -> expr * expr .)
    -               reduce using rule 15 (expr -> expr * expr .)
    *               reduce using rule 15 (expr -> expr * expr .)
    /               reduce using rule 15 (expr -> expr * expr .)
    '               reduce using rule 15 (expr -> expr * expr .)
    ,               reduce using rule 15 (expr -> expr * expr .)
    ]               reduce using rule 15 (expr -> expr * expr .)
    <               reduce using rule 15 (expr -> expr * expr .)
    >               reduce using rule 15 (expr -> expr * expr .)
    LE              reduce using rule 15 (expr -> expr * expr .)
    GE              reduce using rule 15 (expr -> expr * expr .)
    EQ              reduce using rule 15 (expr -> expr * expr .)
    NEQ             reduce using rule 15 (expr -> expr * expr .)
    )               reduce using rule 15 (expr -> expr * expr .)
    {               reduce using rule 15 (expr -> expr * expr .)
    ID              reduce using rule 15 (expr -> expr * expr .)
    WHILE           reduce using rule 15 (expr -> expr * expr .)
    FOR             reduce using rule 15 (expr -> expr * expr .)
    IF              reduce using rule 15 (expr -> expr * expr .)
    BREAK           reduce using rule 15 (expr -> expr * expr .)
    CONTINUE        reduce using rule 15 (expr -> expr * expr .)
    RETURN          reduce using rule 15 (expr -> expr * expr .)
    PRINT           reduce using rule 15 (expr -> expr * expr .)
    $end            reduce using rule 15 (expr -> expr * expr .)
    }               reduce using rule 15 (expr -> expr * expr .)
    ELSE            reduce using rule 15 (expr -> expr * expr .)
    :               reduce using rule 15 (expr -> expr * expr .)
    DOTADD          shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63

  ! DOTADD          [ reduce using rule 15 (expr -> expr * expr .) ]
  ! DOTSUB          [ reduce using rule 15 (expr -> expr * expr .) ]
  ! DOTMUL          [ reduce using rule 15 (expr -> expr * expr .) ]
  ! DOTDIV          [ reduce using rule 15 (expr -> expr * expr .) ]
  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 57 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 59 ]
  ! '               [ shift and go to state 64 ]


state 91

    (16) expr -> expr / expr .
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    ;               reduce using rule 16 (expr -> expr / expr .)
    +               reduce using rule 16 (expr -> expr / expr .)
    -               reduce using rule 16 (expr -> expr / expr .)
    *               reduce using rule 16 (expr -> expr / expr .)
    /               reduce using rule 16 (expr -> expr / expr .)
    '               reduce using rule 16 (expr -> expr / expr .)
    ,               reduce using rule 16 (expr -> expr / expr .)
    ]               reduce using rule 16 (expr -> expr / expr .)
    <               reduce using rule 16 (expr -> expr / expr .)
    >               reduce using rule 16 (expr -> expr / expr .)
    LE              reduce using rule 16 (expr -> expr / expr .)
    GE              reduce using rule 16 (expr -> expr / expr .)
    EQ              reduce using rule 16 (expr -> expr / expr .)
    NEQ             reduce using rule 16 (expr -> expr / expr .)
    )               reduce using rule 16 (expr -> expr / expr .)
    {               reduce using rule 16 (expr -> expr / expr .)
    ID              reduce using rule 16 (expr -> expr / expr .)
    WHILE           reduce using rule 16 (expr -> expr / expr .)
    FOR             reduce using rule 16 (expr -> expr / expr .)
    IF              reduce using rule 16 (expr -> expr / expr .)
    BREAK           reduce using rule 16 (expr -> expr / expr .)
    CONTINUE        reduce using rule 16 (expr -> expr / expr .)
    RETURN          reduce using rule 16 (expr -> expr / expr .)
    PRINT           reduce using rule 16 (expr -> expr / expr .)
    $end            reduce using rule 16 (expr -> expr / expr .)
    }               reduce using rule 16 (expr -> expr / expr .)
    ELSE            reduce using rule 16 (expr -> expr / expr .)
    :               reduce using rule 16 (expr -> expr / expr .)
    DOTADD          shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63

  ! DOTADD          [ reduce using rule 16 (expr -> expr / expr .) ]
  ! DOTSUB          [ reduce using rule 16 (expr -> expr / expr .) ]
  ! DOTMUL          [ reduce using rule 16 (expr -> expr / expr .) ]
  ! DOTDIV          [ reduce using rule 16 (expr -> expr / expr .) ]
  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 57 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 59 ]
  ! '               [ shift and go to state 64 ]


state 92

    (17) expr -> expr DOTADD expr .
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    ;               reduce using rule 17 (expr -> expr DOTADD expr .)
    +               reduce using rule 17 (expr -> expr DOTADD expr .)
    -               reduce using rule 17 (expr -> expr DOTADD expr .)
    *               reduce using rule 17 (expr -> expr DOTADD expr .)
    /               reduce using rule 17 (expr -> expr DOTADD expr .)
    DOTADD          reduce using rule 17 (expr -> expr DOTADD expr .)
    DOTSUB          reduce using rule 17 (expr -> expr DOTADD expr .)
    '               reduce using rule 17 (expr -> expr DOTADD expr .)
    ,               reduce using rule 17 (expr -> expr DOTADD expr .)
    ]               reduce using rule 17 (expr -> expr DOTADD expr .)
    <               reduce using rule 17 (expr -> expr DOTADD expr .)
    >               reduce using rule 17 (expr -> expr DOTADD expr .)
    LE              reduce using rule 17 (expr -> expr DOTADD expr .)
    GE              reduce using rule 17 (expr -> expr DOTADD expr .)
    EQ              reduce using rule 17 (expr -> expr DOTADD expr .)
    NEQ             reduce using rule 17 (expr -> expr DOTADD expr .)
    )               reduce using rule 17 (expr -> expr DOTADD expr .)
    {               reduce using rule 17 (expr -> expr DOTADD expr .)
    ID              reduce using rule 17 (expr -> expr DOTADD expr .)
    WHILE           reduce using rule 17 (expr -> expr DOTADD expr .)
    FOR             reduce using rule 17 (expr -> expr DOTADD expr .)
    IF              reduce using rule 17 (expr -> expr DOTADD expr .)
    BREAK           reduce using rule 17 (expr -> expr DOTADD expr .)
    CONTINUE        reduce using rule 17 (expr -> expr DOTADD expr .)
    RETURN          reduce using rule 17 (expr -> expr DOTADD expr .)
    PRINT           reduce using rule 17 (expr -> expr DOTADD expr .)
    $end            reduce using rule 17 (expr -> expr DOTADD expr .)
    }               reduce using rule 17 (expr -> expr DOTADD expr .)
    ELSE            reduce using rule 17 (expr -> expr DOTADD expr .)
    :               reduce using rule 17 (expr -> expr DOTADD expr .)
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63

  ! DOTMUL          [ reduce using rule 17 (expr -> expr DOTADD expr .) ]
  ! DOTDIV          [ reduce using rule 17 (expr -> expr DOTADD expr .) ]
  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 57 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 59 ]
  ! DOTADD          [ shift and go to state 60 ]
  ! DOTSUB          [ shift and go to state 61 ]
  ! '               [ shift and go to state 64 ]


state 93

    (18) expr -> expr DOTSUB expr .
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    ;               reduce using rule 18 (expr -> expr DOTSUB expr .)
    +               reduce using rule 18 (expr -> expr DOTSUB expr .)
    -               reduce using rule 18 (expr -> expr DOTSUB expr .)
    *               reduce using rule 18 (expr -> expr DOTSUB expr .)
    /               reduce using rule 18 (expr -> expr DOTSUB expr .)
    DOTADD          reduce using rule 18 (expr -> expr DOTSUB expr .)
    DOTSUB          reduce using rule 18 (expr -> expr DOTSUB expr .)
    '               reduce using rule 18 (expr -> expr DOTSUB expr .)
    ,               reduce using rule 18 (expr -> expr DOTSUB expr .)
    ]               reduce using rule 18 (expr -> expr DOTSUB expr .)
    <               reduce using rule 18 (expr -> expr DOTSUB expr .)
    >               reduce using rule 18 (expr -> expr DOTSUB expr .)
    LE              reduce using rule 18 (expr -> expr DOTSUB expr .)
    GE              reduce using rule 18 (expr -> expr DOTSUB expr .)
    EQ              reduce using rule 18 (expr -> expr DOTSUB expr .)
    NEQ             reduce using rule 18 (expr -> expr DOTSUB expr .)
    )               reduce using rule 18 (expr -> expr DOTSUB expr .)
    {               reduce using rule 18 (expr -> expr DOTSUB expr .)
    ID              reduce using rule 18 (expr -> expr DOTSUB expr .)
    WHILE           reduce using rule 18 (expr -> expr DOTSUB expr .)
    FOR             reduce using rule 18 (expr -> expr DOTSUB expr .)
    IF              reduce using rule 18 (expr -> expr DOTSUB expr .)
    BREAK           reduce using rule 18 (expr -> expr DOTSUB expr .)
    CONTINUE        reduce using rule 18 (expr -> expr DOTSUB expr .)
    RETURN          reduce using rule 18 (expr -> expr DOTSUB expr .)
    PRINT           reduce using rule 18 (expr -> expr DOTSUB expr .)
    $end            reduce using rule 18 (expr -> expr DOTSUB expr .)
    }               reduce using rule 18 (expr -> expr DOTSUB expr .)
    ELSE            reduce using rule 18 (expr -> expr DOTSUB expr .)
    :               reduce using rule 18 (expr -> expr DOTSUB expr .)
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63

  ! DOTMUL          [ reduce using rule 18 (expr -> expr DOTSUB expr .) ]
  ! DOTDIV          [ reduce using rule 18 (expr -> expr DOTSUB expr .) ]
  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 57 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 59 ]
  ! DOTADD          [ shift and go to state 60 ]
  ! DOTSUB          [ shift and go to state 61 ]
  ! '               [ shift and go to state 64 ]


state 94

    (19) expr -> expr DOTMUL expr .
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    ;               reduce using rule 19 (expr -> expr DOTMUL expr .)
    +               reduce using rule 19 (expr -> expr DOTMUL expr .)
    -               reduce using rule 19 (expr -> expr DOTMUL expr .)
    *               reduce using rule 19 (expr -> expr DOTMUL expr .)
    /               reduce using rule 19 (expr -> expr DOTMUL expr .)
    DOTADD          reduce using rule 19 (expr -> expr DOTMUL expr .)
    DOTSUB          reduce using rule 19 (expr -> expr DOTMUL expr .)
    DOTMUL          reduce using rule 19 (expr -> expr DOTMUL expr .)
    DOTDIV          reduce using rule 19 (expr -> expr DOTMUL expr .)
    '               reduce using rule 19 (expr -> expr DOTMUL expr .)
    ,               reduce using rule 19 (expr -> expr DOTMUL expr .)
    ]               reduce using rule 19 (expr -> expr DOTMUL expr .)
    <               reduce using rule 19 (expr -> expr DOTMUL expr .)
    >               reduce using rule 19 (expr -> expr DOTMUL expr .)
    LE              reduce using rule 19 (expr -> expr DOTMUL expr .)
    GE              reduce using rule 19 (expr -> expr DOTMUL expr .)
    EQ              reduce using rule 19 (expr -> expr DOTMUL expr .)
    NEQ             reduce using rule 19 (expr -> expr DOTMUL expr .)
    )               reduce using rule 19 (expr -> expr DOTMUL expr .)
    {               reduce using rule 19 (expr -> expr DOTMUL expr .)
    ID              reduce using rule 19 (expr -> expr DOTMUL expr .)
    WHILE           reduce using rule 19 (expr -> expr DOTMUL expr .)
    FOR             reduce using rule 19 (expr -> expr DOTMUL expr .)
    IF              reduce using rule 19 (expr -> expr DOTMUL expr .)
    BREAK           reduce using rule 19 (expr -> expr DOTMUL expr .)
    CONTINUE        reduce using rule 19 (expr -> expr DOTMUL expr .)
    RETURN          reduce using rule 19 (expr -> expr DOTMUL expr .)
    PRINT           reduce using rule 19 (expr -> expr DOTMUL expr .)
    $end            reduce using rule 19 (expr -> expr DOTMUL expr .)
    }               reduce using rule 19 (expr -> expr DOTMUL expr .)
    ELSE            reduce using rule 19 (expr -> expr DOTMUL expr .)
    :               reduce using rule 19 (expr -> expr DOTMUL expr .)

  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 57 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 59 ]
  ! DOTADD          [ shift and go to state 60 ]
  ! DOTSUB          [ shift and go to state 61 ]
  ! DOTMUL          [ shift and go to state 62 ]
  ! DOTDIV          [ shift and go to state 63 ]
  ! '               [ shift and go to state 64 ]


state 95

    (20) expr -> expr DOTDIV expr .
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    ;               reduce using rule 20 (expr -> expr DOTDIV expr .)
    +               reduce using rule 20 (expr -> expr DOTDIV expr .)
    -               reduce using rule 20 (expr -> expr DOTDIV expr .)
    *               reduce using rule 20 (expr -> expr DOTDIV expr .)
    /               reduce using rule 20 (expr -> expr DOTDIV expr .)
    DOTADD          reduce using rule 20 (expr -> expr DOTDIV expr .)
    DOTSUB          reduce using rule 20 (expr -> expr DOTDIV expr .)
    DOTMUL          reduce using rule 20 (expr -> expr DOTDIV expr .)
    DOTDIV          reduce using rule 20 (expr -> expr DOTDIV expr .)
    '               reduce using rule 20 (expr -> expr DOTDIV expr .)
    ,               reduce using rule 20 (expr -> expr DOTDIV expr .)
    ]               reduce using rule 20 (expr -> expr DOTDIV expr .)
    <               reduce using rule 20 (expr -> expr DOTDIV expr .)
    >               reduce using rule 20 (expr -> expr DOTDIV expr .)
    LE              reduce using rule 20 (expr -> expr DOTDIV expr .)
    GE              reduce using rule 20 (expr -> expr DOTDIV expr .)
    EQ              reduce using rule 20 (expr -> expr DOTDIV expr .)
    NEQ             reduce using rule 20 (expr -> expr DOTDIV expr .)
    )               reduce using rule 20 (expr -> expr DOTDIV expr .)
    {               reduce using rule 20 (expr -> expr DOTDIV expr .)
    ID              reduce using rule 20 (expr -> expr DOTDIV expr .)
    WHILE           reduce using rule 20 (expr -> expr DOTDIV expr .)
    FOR             reduce using rule 20 (expr -> expr DOTDIV expr .)
    IF              reduce using rule 20 (expr -> expr DOTDIV expr .)
    BREAK           reduce using rule 20 (expr -> expr DOTDIV expr .)
    CONTINUE        reduce using rule 20 (expr -> expr DOTDIV expr .)
    RETURN          reduce using rule 20 (expr -> expr DOTDIV expr .)
    PRINT           reduce using rule 20 (expr -> expr DOTDIV expr .)
    $end            reduce using rule 20 (expr -> expr DOTDIV expr .)
    }               reduce using rule 20 (expr -> expr DOTDIV expr .)
    ELSE            reduce using rule 20 (expr -> expr DOTDIV expr .)
    :               reduce using rule 20 (expr -> expr DOTDIV expr .)

  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 57 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 59 ]
  ! DOTADD          [ shift and go to state 60 ]
  ! DOTSUB          [ shift and go to state 61 ]
  ! DOTMUL          [ shift and go to state 62 ]
  ! DOTDIV          [ shift and go to state 63 ]
  ! '               [ shift and go to state 64 ]


state 96

    (25) expr -> ( expr ) .

    ;               reduce using rule 25 (expr -> ( expr ) .)
    +               reduce using rule 25 (expr -> ( expr ) .)
    -               reduce using rule 25 (expr -> ( expr ) .)
    *               reduce using rule 25 (expr -> ( expr ) .)
    /               reduce using rule 25 (expr -> ( expr ) .)
    DOTADD          reduce using rule 25 (expr -> ( expr ) .)
    DOTSUB          reduce using rule 25 (expr -> ( expr ) .)
    DOTMUL          reduce using rule 25 (expr -> ( expr ) .)
    DOTDIV          reduce using rule 25 (expr -> ( expr ) .)
    '               reduce using rule 25 (expr -> ( expr ) .)
    ,               reduce using rule 25 (expr -> ( expr ) .)
    ]               reduce using rule 25 (expr -> ( expr ) .)
    <               reduce using rule 25 (expr -> ( expr ) .)
    >               reduce using rule 25 (expr -> ( expr ) .)
    LE              reduce using rule 25 (expr -> ( expr ) .)
    GE              reduce using rule 25 (expr -> ( expr ) .)
    EQ              reduce using rule 25 (expr -> ( expr ) .)
    NEQ             reduce using rule 25 (expr -> ( expr ) .)
    )               reduce using rule 25 (expr -> ( expr ) .)
    {               reduce using rule 25 (expr -> ( expr ) .)
    ID              reduce using rule 25 (expr -> ( expr ) .)
    WHILE           reduce using rule 25 (expr -> ( expr ) .)
    FOR             reduce using rule 25 (expr -> ( expr ) .)
    IF              reduce using rule 25 (expr -> ( expr ) .)
    BREAK           reduce using rule 25 (expr -> ( expr ) .)
    CONTINUE        reduce using rule 25 (expr -> ( expr ) .)
    RETURN          reduce using rule 25 (expr -> ( expr ) .)
    PRINT           reduce using rule 25 (expr -> ( expr ) .)
    $end            reduce using rule 25 (expr -> ( expr ) .)
    }               reduce using rule 25 (expr -> ( expr ) .)
    ELSE            reduce using rule 25 (expr -> ( expr ) .)
    :               reduce using rule 25 (expr -> ( expr ) .)


state 97

    (34) expr -> [ lists ] .

    ;               reduce using rule 34 (expr -> [ lists ] .)
    +               reduce using rule 34 (expr -> [ lists ] .)
    -               reduce using rule 34 (expr -> [ lists ] .)
    *               reduce using rule 34 (expr -> [ lists ] .)
    /               reduce using rule 34 (expr -> [ lists ] .)
    DOTADD          reduce using rule 34 (expr -> [ lists ] .)
    DOTSUB          reduce using rule 34 (expr -> [ lists ] .)
    DOTMUL          reduce using rule 34 (expr -> [ lists ] .)
    DOTDIV          reduce using rule 34 (expr -> [ lists ] .)
    '               reduce using rule 34 (expr -> [ lists ] .)
    ,               reduce using rule 34 (expr -> [ lists ] .)
    ]               reduce using rule 34 (expr -> [ lists ] .)
    <               reduce using rule 34 (expr -> [ lists ] .)
    >               reduce using rule 34 (expr -> [ lists ] .)
    LE              reduce using rule 34 (expr -> [ lists ] .)
    GE              reduce using rule 34 (expr -> [ lists ] .)
    EQ              reduce using rule 34 (expr -> [ lists ] .)
    NEQ             reduce using rule 34 (expr -> [ lists ] .)
    )               reduce using rule 34 (expr -> [ lists ] .)
    {               reduce using rule 34 (expr -> [ lists ] .)
    ID              reduce using rule 34 (expr -> [ lists ] .)
    WHILE           reduce using rule 34 (expr -> [ lists ] .)
    FOR             reduce using rule 34 (expr -> [ lists ] .)
    IF              reduce using rule 34 (expr -> [ lists ] .)
    BREAK           reduce using rule 34 (expr -> [ lists ] .)
    CONTINUE        reduce using rule 34 (expr -> [ lists ] .)
    RETURN          reduce using rule 34 (expr -> [ lists ] .)
    PRINT           reduce using rule 34 (expr -> [ lists ] .)
    $end            reduce using rule 34 (expr -> [ lists ] .)
    }               reduce using rule 34 (expr -> [ lists ] .)
    ELSE            reduce using rule 34 (expr -> [ lists ] .)
    :               reduce using rule 34 (expr -> [ lists ] .)


state 98

    (36) lists -> lists , . list
    (37) list -> . [ seq ]

    [               shift and go to state 23

    list                           shift and go to state 110

state 99

    (43) expr -> fun ( expr . )
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    )               shift and go to state 111
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63
    '               shift and go to state 64


state 100

    (39) seq -> seq , expr .
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    ;               reduce using rule 39 (seq -> seq , expr .)
    ,               reduce using rule 39 (seq -> seq , expr .)
    ]               reduce using rule 39 (seq -> seq , expr .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63
    '               shift and go to state 64


state 101

    (44) stmt -> WHILE ( cond ) stmt .

    ;               reduce using rule 44 (stmt -> WHILE ( cond ) stmt .)
    {               reduce using rule 44 (stmt -> WHILE ( cond ) stmt .)
    ID              reduce using rule 44 (stmt -> WHILE ( cond ) stmt .)
    WHILE           reduce using rule 44 (stmt -> WHILE ( cond ) stmt .)
    FOR             reduce using rule 44 (stmt -> WHILE ( cond ) stmt .)
    IF              reduce using rule 44 (stmt -> WHILE ( cond ) stmt .)
    BREAK           reduce using rule 44 (stmt -> WHILE ( cond ) stmt .)
    CONTINUE        reduce using rule 44 (stmt -> WHILE ( cond ) stmt .)
    RETURN          reduce using rule 44 (stmt -> WHILE ( cond ) stmt .)
    PRINT           reduce using rule 44 (stmt -> WHILE ( cond ) stmt .)
    $end            reduce using rule 44 (stmt -> WHILE ( cond ) stmt .)
    }               reduce using rule 44 (stmt -> WHILE ( cond ) stmt .)
    ELSE            reduce using rule 44 (stmt -> WHILE ( cond ) stmt .)


state 102

    (28) cond -> expr < expr .
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    )               reduce using rule 28 (cond -> expr < expr .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63
    '               shift and go to state 64


state 103

    (29) cond -> expr > expr .
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    )               reduce using rule 29 (cond -> expr > expr .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63
    '               shift and go to state 64


state 104

    (30) cond -> expr LE expr .
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    )               reduce using rule 30 (cond -> expr LE expr .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63
    '               shift and go to state 64


state 105

    (31) cond -> expr GE expr .
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    )               reduce using rule 31 (cond -> expr GE expr .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63
    '               shift and go to state 64


state 106

    (32) cond -> expr EQ expr .
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    )               reduce using rule 32 (cond -> expr EQ expr .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63
    '               shift and go to state 64


state 107

    (33) cond -> expr NEQ expr .
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '

    )               reduce using rule 33 (cond -> expr NEQ expr .)
    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63
    '               shift and go to state 64


state 108

    (45) stmt -> FOR ID = expr : . expr stmt
    (13) expr -> . expr + expr
    (14) expr -> . expr - expr
    (15) expr -> . expr * expr
    (16) expr -> . expr / expr
    (17) expr -> . expr DOTADD expr
    (18) expr -> . expr DOTSUB expr
    (19) expr -> . expr DOTMUL expr
    (20) expr -> . expr DOTDIV expr
    (21) expr -> . FLOATNUM
    (22) expr -> . INTNUM
    (23) expr -> . ID
    (24) expr -> . STR
    (25) expr -> . ( expr )
    (26) expr -> . - expr
    (27) expr -> . expr '
    (34) expr -> . [ lists ]
    (43) expr -> . fun ( expr )
    (40) fun -> . ZEROS
    (41) fun -> . EYE
    (42) fun -> . ONES

    FLOATNUM        shift and go to state 31
    INTNUM          shift and go to state 32
    ID              shift and go to state 33
    STR             shift and go to state 34
    (               shift and go to state 35
    -               shift and go to state 30
    [               shift and go to state 36
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40

    expr                           shift and go to state 112
    fun                            shift and go to state 37

state 109

    (46) stmt -> IF ( cond ) stmt .
    (47) stmt -> IF ( cond ) stmt . ELSE stmt

    ;               reduce using rule 46 (stmt -> IF ( cond ) stmt .)
    {               reduce using rule 46 (stmt -> IF ( cond ) stmt .)
    ID              reduce using rule 46 (stmt -> IF ( cond ) stmt .)
    WHILE           reduce using rule 46 (stmt -> IF ( cond ) stmt .)
    FOR             reduce using rule 46 (stmt -> IF ( cond ) stmt .)
    IF              reduce using rule 46 (stmt -> IF ( cond ) stmt .)
    BREAK           reduce using rule 46 (stmt -> IF ( cond ) stmt .)
    CONTINUE        reduce using rule 46 (stmt -> IF ( cond ) stmt .)
    RETURN          reduce using rule 46 (stmt -> IF ( cond ) stmt .)
    PRINT           reduce using rule 46 (stmt -> IF ( cond ) stmt .)
    $end            reduce using rule 46 (stmt -> IF ( cond ) stmt .)
    }               reduce using rule 46 (stmt -> IF ( cond ) stmt .)
    ELSE            shift and go to state 113

  ! ELSE            [ reduce using rule 46 (stmt -> IF ( cond ) stmt .) ]


state 110

    (36) lists -> lists , list .

    ]               reduce using rule 36 (lists -> lists , list .)
    ,               reduce using rule 36 (lists -> lists , list .)


state 111

    (43) expr -> fun ( expr ) .

    ;               reduce using rule 43 (expr -> fun ( expr ) .)
    +               reduce using rule 43 (expr -> fun ( expr ) .)
    -               reduce using rule 43 (expr -> fun ( expr ) .)
    *               reduce using rule 43 (expr -> fun ( expr ) .)
    /               reduce using rule 43 (expr -> fun ( expr ) .)
    DOTADD          reduce using rule 43 (expr -> fun ( expr ) .)
    DOTSUB          reduce using rule 43 (expr -> fun ( expr ) .)
    DOTMUL          reduce using rule 43 (expr -> fun ( expr ) .)
    DOTDIV          reduce using rule 43 (expr -> fun ( expr ) .)
    '               reduce using rule 43 (expr -> fun ( expr ) .)
    ,               reduce using rule 43 (expr -> fun ( expr ) .)
    ]               reduce using rule 43 (expr -> fun ( expr ) .)
    <               reduce using rule 43 (expr -> fun ( expr ) .)
    >               reduce using rule 43 (expr -> fun ( expr ) .)
    LE              reduce using rule 43 (expr -> fun ( expr ) .)
    GE              reduce using rule 43 (expr -> fun ( expr ) .)
    EQ              reduce using rule 43 (expr -> fun ( expr ) .)
    NEQ             reduce using rule 43 (expr -> fun ( expr ) .)
    )               reduce using rule 43 (expr -> fun ( expr ) .)
    {               reduce using rule 43 (expr -> fun ( expr ) .)
    ID              reduce using rule 43 (expr -> fun ( expr ) .)
    WHILE           reduce using rule 43 (expr -> fun ( expr ) .)
    FOR             reduce using rule 43 (expr -> fun ( expr ) .)
    IF              reduce using rule 43 (expr -> fun ( expr ) .)
    BREAK           reduce using rule 43 (expr -> fun ( expr ) .)
    CONTINUE        reduce using rule 43 (expr -> fun ( expr ) .)
    RETURN          reduce using rule 43 (expr -> fun ( expr ) .)
    PRINT           reduce using rule 43 (expr -> fun ( expr ) .)
    $end            reduce using rule 43 (expr -> fun ( expr ) .)
    }               reduce using rule 43 (expr -> fun ( expr ) .)
    ELSE            reduce using rule 43 (expr -> fun ( expr ) .)
    :               reduce using rule 43 (expr -> fun ( expr ) .)


state 112

    (45) stmt -> FOR ID = expr : expr . stmt
    (13) expr -> expr . + expr
    (14) expr -> expr . - expr
    (15) expr -> expr . * expr
    (16) expr -> expr . / expr
    (17) expr -> expr . DOTADD expr
    (18) expr -> expr . DOTSUB expr
    (19) expr -> expr . DOTMUL expr
    (20) expr -> expr . DOTDIV expr
    (27) expr -> expr . '
    (6) stmt -> . ;
    (7) stmt -> . { stmts }
    (8) stmt -> . ID = expr ;
    (9) stmt -> . ID ADDASSIGN expr ;
    (10) stmt -> . ID SUBASSIGN expr ;
    (11) stmt -> . ID MULASSIGN expr ;
    (12) stmt -> . ID DIVASSIGN expr ;
    (44) stmt -> . WHILE ( cond ) stmt
    (45) stmt -> . FOR ID = expr : expr stmt
    (46) stmt -> . IF ( cond ) stmt
    (47) stmt -> . IF ( cond ) stmt ELSE stmt
    (48) stmt -> . BREAK ;
    (49) stmt -> . CONTINUE ;
    (50) stmt -> . RETURN expr ;
    (51) stmt -> . PRINT seq ;
    (52) stmt -> . ID list = expr

    +               shift and go to state 56
    -               shift and go to state 57
    *               shift and go to state 58
    /               shift and go to state 59
    DOTADD          shift and go to state 60
    DOTSUB          shift and go to state 61
    DOTMUL          shift and go to state 62
    DOTDIV          shift and go to state 63
    '               shift and go to state 64
    ;               shift and go to state 5
    {               shift and go to state 6
    ID              shift and go to state 7
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14

    stmt                           shift and go to state 114

state 113

    (47) stmt -> IF ( cond ) stmt ELSE . stmt
    (6) stmt -> . ;
    (7) stmt -> . { stmts }
    (8) stmt -> . ID = expr ;
    (9) stmt -> . ID ADDASSIGN expr ;
    (10) stmt -> . ID SUBASSIGN expr ;
    (11) stmt -> . ID MULASSIGN expr ;
    (12) stmt -> . ID DIVASSIGN expr ;
    (44) stmt -> . WHILE ( cond ) stmt
    (45) stmt -> . FOR ID = expr : expr stmt
    (46) stmt -> . IF ( cond ) stmt
    (47) stmt -> . IF ( cond ) stmt ELSE stmt
    (48) stmt -> . BREAK ;
    (49) stmt -> . CONTINUE ;
    (50) stmt -> . RETURN expr ;
    (51) stmt -> . PRINT seq ;
    (52) stmt -> . ID list = expr

    ;               shift and go to state 5
    {               shift and go to state 6
    ID              shift and go to state 7
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14

    stmt                           shift and go to state 115

state 114

    (45) stmt -> FOR ID = expr : expr stmt .

    ;               reduce using rule 45 (stmt -> FOR ID = expr : expr stmt .)
    {               reduce using rule 45 (stmt -> FOR ID = expr : expr stmt .)
    ID              reduce using rule 45 (stmt -> FOR ID = expr : expr stmt .)
    WHILE           reduce using rule 45 (stmt -> FOR ID = expr : expr stmt .)
    FOR             reduce using rule 45 (stmt -> FOR ID = expr : expr stmt .)
    IF              reduce using rule 45 (stmt -> FOR ID = expr : expr stmt .)
    BREAK           reduce using rule 45 (stmt -> FOR ID = expr : expr stmt .)
    CONTINUE        reduce using rule 45 (stmt -> FOR ID = expr : expr stmt .)
    RETURN          reduce using rule 45 (stmt -> FOR ID = expr : expr stmt .)
    PRINT           reduce using rule 45 (stmt -> FOR ID = expr : expr stmt .)
    $end            reduce using rule 45 (stmt -> FOR ID = expr : expr stmt .)
    }               reduce using rule 45 (stmt -> FOR ID = expr : expr stmt .)
    ELSE            reduce using rule 45 (stmt -> FOR ID = expr : expr stmt .)


state 115

    (47) stmt -> IF ( cond ) stmt ELSE stmt .

    ;               reduce using rule 47 (stmt -> IF ( cond ) stmt ELSE stmt .)
    {               reduce using rule 47 (stmt -> IF ( cond ) stmt ELSE stmt .)
    ID              reduce using rule 47 (stmt -> IF ( cond ) stmt ELSE stmt .)
    WHILE           reduce using rule 47 (stmt -> IF ( cond ) stmt ELSE stmt .)
    FOR             reduce using rule 47 (stmt -> IF ( cond ) stmt ELSE stmt .)
    IF              reduce using rule 47 (stmt -> IF ( cond ) stmt ELSE stmt .)
    BREAK           reduce using rule 47 (stmt -> IF ( cond ) stmt ELSE stmt .)
    CONTINUE        reduce using rule 47 (stmt -> IF ( cond ) stmt ELSE stmt .)
    RETURN          reduce using rule 47 (stmt -> IF ( cond ) stmt ELSE stmt .)
    PRINT           reduce using rule 47 (stmt -> IF ( cond ) stmt ELSE stmt .)
    $end            reduce using rule 47 (stmt -> IF ( cond ) stmt ELSE stmt .)
    }               reduce using rule 47 (stmt -> IF ( cond ) stmt ELSE stmt .)
    ELSE            reduce using rule 47 (stmt -> IF ( cond ) stmt ELSE stmt .)


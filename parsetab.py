
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "nonassocIFXnonassocELSEleft+-left*/leftDOTADDDOTSUBleftDOTMULDOTDIVrightUMINUSADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FLOATNUM FOR GE ID IF INTNUM LE MULASSIGN NEQ ONES PRINT RETURN STR SUBASSIGN WHILE ZEROSprogram : stmts_optstmts_opt : stmts\n                 | stmts : stmts stmt\n             | stmtstmt : ';'stmt : '{' stmts '}'stmt : ID '=' expr ';'\n            | ID ADDASSIGN expr ';'\n            | ID SUBASSIGN expr ';'\n            | ID MULASSIGN expr ';'\n            | ID DIVASSIGN expr ';'expr : expr '+' expr\n            | expr '-' expr\n            | expr '*' expr\n            | expr '/' expr\n            | expr DOTADD expr\n            | expr DOTSUB expr\n            | expr DOTMUL expr\n            | expr DOTDIV exprexpr : FLOATNUM\n            | INTNUMexpr : IDexpr : STRexpr : '(' expr ')'expr : '-' expr %prec UMINUSexpr : expr '\\''cond : expr '<' expr\n            | expr '>' expr\n            | expr LE expr\n            | expr GE expr\n            | expr EQ expr\n            | expr NEQ exprexpr : '[' lists ']'lists : list\n             | lists ',' listlist : '[' seq ']'seq : expr\n           | seq ',' exprfun : ZEROS \n           | EYE\n           | ONESexpr : fun '(' expr ')'stmt : WHILE '(' cond ')' stmtstmt : FOR ID '=' expr ':' expr stmtstmt : IF '(' cond ')' stmt %prec IFX\n            | IF '(' cond ')' stmt ELSE stmtstmt : BREAK ';'\n            | CONTINUE ';'\n            | RETURN expr ';'stmt : PRINT seq ';'stmt : ID list '=' expr"
    
_lr_action_items = {'$end':([0,1,2,3,4,5,15,27,28,31,32,33,34,43,55,64,65,70,72,73,74,75,76,77,88,89,90,91,92,93,94,95,96,97,101,109,111,114,115,],[-3,0,-1,-2,-5,-6,-4,-48,-49,-21,-22,-23,-24,-7,-50,-27,-26,-51,-8,-9,-10,-11,-12,-52,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,-44,-46,-43,-45,-47,]),';':([0,3,4,5,6,11,12,15,16,27,28,29,31,32,33,34,41,42,43,44,45,46,47,48,55,64,65,70,72,73,74,75,76,77,79,87,88,89,90,91,92,93,94,95,96,97,100,101,109,111,112,113,114,115,],[5,5,-5,-6,5,27,28,-4,5,-48,-49,55,-21,-22,-23,-24,70,-38,-7,72,73,74,75,76,-50,-27,-26,-51,-8,-9,-10,-11,-12,-52,5,5,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,-39,-44,-46,-43,5,5,-45,-47,]),'{':([0,3,4,5,6,15,16,27,28,31,32,33,34,43,55,64,65,70,72,73,74,75,76,77,79,87,88,89,90,91,92,93,94,95,96,97,101,109,111,112,113,114,115,],[6,6,-5,-6,6,-4,6,-48,-49,-21,-22,-23,-24,-7,-50,-27,-26,-51,-8,-9,-10,-11,-12,-52,6,6,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,-44,-46,-43,6,6,-45,-47,]),'ID':([0,3,4,5,6,9,13,14,15,16,17,18,19,20,21,23,24,26,27,28,30,31,32,33,34,35,43,49,53,55,56,57,58,59,60,61,62,63,64,65,69,70,71,72,73,74,75,76,77,79,80,81,82,83,84,85,87,88,89,90,91,92,93,94,95,96,97,101,108,109,111,112,113,114,115,],[7,7,-5,-6,7,25,33,33,-4,7,33,33,33,33,33,33,33,33,-48,-49,33,-21,-22,-23,-24,33,-7,33,33,-50,33,33,33,33,33,33,33,33,-27,-26,33,-51,33,-8,-9,-10,-11,-12,-52,7,33,33,33,33,33,33,7,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,-44,33,-46,-43,7,7,-45,-47,]),'WHILE':([0,3,4,5,6,15,16,27,28,31,32,33,34,43,55,64,65,70,72,73,74,75,76,77,79,87,88,89,90,91,92,93,94,95,96,97,101,109,111,112,113,114,115,],[8,8,-5,-6,8,-4,8,-48,-49,-21,-22,-23,-24,-7,-50,-27,-26,-51,-8,-9,-10,-11,-12,-52,8,8,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,-44,-46,-43,8,8,-45,-47,]),'FOR':([0,3,4,5,6,15,16,27,28,31,32,33,34,43,55,64,65,70,72,73,74,75,76,77,79,87,88,89,90,91,92,93,94,95,96,97,101,109,111,112,113,114,115,],[9,9,-5,-6,9,-4,9,-48,-49,-21,-22,-23,-24,-7,-50,-27,-26,-51,-8,-9,-10,-11,-12,-52,9,9,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,-44,-46,-43,9,9,-45,-47,]),'IF':([0,3,4,5,6,15,16,27,28,31,32,33,34,43,55,64,65,70,72,73,74,75,76,77,79,87,88,89,90,91,92,93,94,95,96,97,101,109,111,112,113,114,115,],[10,10,-5,-6,10,-4,10,-48,-49,-21,-22,-23,-24,-7,-50,-27,-26,-51,-8,-9,-10,-11,-12,-52,10,10,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,-44,-46,-43,10,10,-45,-47,]),'BREAK':([0,3,4,5,6,15,16,27,28,31,32,33,34,43,55,64,65,70,72,73,74,75,76,77,79,87,88,89,90,91,92,93,94,95,96,97,101,109,111,112,113,114,115,],[11,11,-5,-6,11,-4,11,-48,-49,-21,-22,-23,-24,-7,-50,-27,-26,-51,-8,-9,-10,-11,-12,-52,11,11,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,-44,-46,-43,11,11,-45,-47,]),'CONTINUE':([0,3,4,5,6,15,16,27,28,31,32,33,34,43,55,64,65,70,72,73,74,75,76,77,79,87,88,89,90,91,92,93,94,95,96,97,101,109,111,112,113,114,115,],[12,12,-5,-6,12,-4,12,-48,-49,-21,-22,-23,-24,-7,-50,-27,-26,-51,-8,-9,-10,-11,-12,-52,12,12,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,-44,-46,-43,12,12,-45,-47,]),'RETURN':([0,3,4,5,6,15,16,27,28,31,32,33,34,43,55,64,65,70,72,73,74,75,76,77,79,87,88,89,90,91,92,93,94,95,96,97,101,109,111,112,113,114,115,],[13,13,-5,-6,13,-4,13,-48,-49,-21,-22,-23,-24,-7,-50,-27,-26,-51,-8,-9,-10,-11,-12,-52,13,13,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,-44,-46,-43,13,13,-45,-47,]),'PRINT':([0,3,4,5,6,15,16,27,28,31,32,33,34,43,55,64,65,70,72,73,74,75,76,77,79,87,88,89,90,91,92,93,94,95,96,97,101,109,111,112,113,114,115,],[14,14,-5,-6,14,-4,14,-48,-49,-21,-22,-23,-24,-7,-50,-27,-26,-51,-8,-9,-10,-11,-12,-52,14,14,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,-44,-46,-43,14,14,-45,-47,]),'}':([4,5,15,16,27,28,31,32,33,34,43,55,64,65,70,72,73,74,75,76,77,88,89,90,91,92,93,94,95,96,97,101,109,111,114,115,],[-5,-6,-4,43,-48,-49,-21,-22,-23,-24,-7,-50,-27,-26,-51,-8,-9,-10,-11,-12,-52,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,-44,-46,-43,-45,-47,]),'ELSE':([5,27,28,31,32,33,34,43,55,64,65,70,72,73,74,75,76,77,88,89,90,91,92,93,94,95,96,97,101,109,111,114,115,],[-6,-48,-49,-21,-22,-23,-24,-7,-50,-27,-26,-51,-8,-9,-10,-11,-12,-52,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,-44,113,-43,-45,-47,]),'=':([7,22,25,78,],[17,49,53,-37,]),'ADDASSIGN':([7,],[18,]),'SUBASSIGN':([7,],[19,]),'MULASSIGN':([7,],[20,]),'DIVASSIGN':([7,],[21,]),'[':([7,13,14,17,18,19,20,21,23,24,26,30,35,36,49,53,56,57,58,59,60,61,62,63,69,71,80,81,82,83,84,85,98,108,],[23,36,36,36,36,36,36,36,36,36,36,36,36,23,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,23,36,]),'(':([8,10,13,14,17,18,19,20,21,23,24,26,30,35,37,38,39,40,49,53,56,57,58,59,60,61,62,63,69,71,80,81,82,83,84,85,108,],[24,26,35,35,35,35,35,35,35,35,35,35,35,35,69,-40,-41,-42,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'FLOATNUM':([13,14,17,18,19,20,21,23,24,26,30,35,49,53,56,57,58,59,60,61,62,63,69,71,80,81,82,83,84,85,108,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'INTNUM':([13,14,17,18,19,20,21,23,24,26,30,35,49,53,56,57,58,59,60,61,62,63,69,71,80,81,82,83,84,85,108,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'STR':([13,14,17,18,19,20,21,23,24,26,30,35,49,53,56,57,58,59,60,61,62,63,69,71,80,81,82,83,84,85,108,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'-':([13,14,17,18,19,20,21,23,24,26,29,30,31,32,33,34,35,42,44,45,46,47,48,49,52,53,56,57,58,59,60,61,62,63,64,65,66,69,71,77,80,81,82,83,84,85,86,88,89,90,91,92,93,94,95,96,97,99,100,102,103,104,105,106,107,108,111,112,],[30,30,30,30,30,30,30,30,30,30,57,30,-21,-22,-23,-24,30,57,57,57,57,57,57,30,57,30,30,30,30,30,30,30,30,30,-27,-26,57,30,30,57,30,30,30,30,30,30,57,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,57,57,57,57,57,57,57,57,30,-43,57,]),'ZEROS':([13,14,17,18,19,20,21,23,24,26,30,35,49,53,56,57,58,59,60,61,62,63,69,71,80,81,82,83,84,85,108,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'EYE':([13,14,17,18,19,20,21,23,24,26,30,35,49,53,56,57,58,59,60,61,62,63,69,71,80,81,82,83,84,85,108,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'ONES':([13,14,17,18,19,20,21,23,24,26,30,35,49,53,56,57,58,59,60,61,62,63,69,71,80,81,82,83,84,85,108,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'+':([29,31,32,33,34,42,44,45,46,47,48,52,64,65,66,77,86,88,89,90,91,92,93,94,95,96,97,99,100,102,103,104,105,106,107,111,112,],[56,-21,-22,-23,-24,56,56,56,56,56,56,56,-27,-26,56,56,56,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,56,56,56,56,56,56,56,56,-43,56,]),'*':([29,31,32,33,34,42,44,45,46,47,48,52,64,65,66,77,86,88,89,90,91,92,93,94,95,96,97,99,100,102,103,104,105,106,107,111,112,],[58,-21,-22,-23,-24,58,58,58,58,58,58,58,-27,-26,58,58,58,58,58,-15,-16,-17,-18,-19,-20,-25,-34,58,58,58,58,58,58,58,58,-43,58,]),'/':([29,31,32,33,34,42,44,45,46,47,48,52,64,65,66,77,86,88,89,90,91,92,93,94,95,96,97,99,100,102,103,104,105,106,107,111,112,],[59,-21,-22,-23,-24,59,59,59,59,59,59,59,-27,-26,59,59,59,59,59,-15,-16,-17,-18,-19,-20,-25,-34,59,59,59,59,59,59,59,59,-43,59,]),'DOTADD':([29,31,32,33,34,42,44,45,46,47,48,52,64,65,66,77,86,88,89,90,91,92,93,94,95,96,97,99,100,102,103,104,105,106,107,111,112,],[60,-21,-22,-23,-24,60,60,60,60,60,60,60,-27,-26,60,60,60,60,60,60,60,-17,-18,-19,-20,-25,-34,60,60,60,60,60,60,60,60,-43,60,]),'DOTSUB':([29,31,32,33,34,42,44,45,46,47,48,52,64,65,66,77,86,88,89,90,91,92,93,94,95,96,97,99,100,102,103,104,105,106,107,111,112,],[61,-21,-22,-23,-24,61,61,61,61,61,61,61,-27,-26,61,61,61,61,61,61,61,-17,-18,-19,-20,-25,-34,61,61,61,61,61,61,61,61,-43,61,]),'DOTMUL':([29,31,32,33,34,42,44,45,46,47,48,52,64,65,66,77,86,88,89,90,91,92,93,94,95,96,97,99,100,102,103,104,105,106,107,111,112,],[62,-21,-22,-23,-24,62,62,62,62,62,62,62,-27,-26,62,62,62,62,62,62,62,62,62,-19,-20,-25,-34,62,62,62,62,62,62,62,62,-43,62,]),'DOTDIV':([29,31,32,33,34,42,44,45,46,47,48,52,64,65,66,77,86,88,89,90,91,92,93,94,95,96,97,99,100,102,103,104,105,106,107,111,112,],[63,-21,-22,-23,-24,63,63,63,63,63,63,63,-27,-26,63,63,63,63,63,63,63,63,63,-19,-20,-25,-34,63,63,63,63,63,63,63,63,-43,63,]),"'":([29,31,32,33,34,42,44,45,46,47,48,52,64,65,66,77,86,88,89,90,91,92,93,94,95,96,97,99,100,102,103,104,105,106,107,111,112,],[64,-21,-22,-23,-24,64,64,64,64,64,64,64,-27,-26,64,64,64,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,64,64,64,64,64,64,64,64,-43,64,]),',':([31,32,33,34,41,42,50,64,65,67,68,78,88,89,90,91,92,93,94,95,96,97,100,110,111,],[-21,-22,-23,-24,71,-38,71,-27,-26,98,-35,-37,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,-39,-36,-43,]),']':([31,32,33,34,42,50,64,65,67,68,78,88,89,90,91,92,93,94,95,96,97,100,110,111,],[-21,-22,-23,-24,-38,78,-27,-26,97,-35,-37,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,-39,-36,-43,]),'<':([31,32,33,34,52,64,65,88,89,90,91,92,93,94,95,96,97,111,],[-21,-22,-23,-24,80,-27,-26,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,-43,]),'>':([31,32,33,34,52,64,65,88,89,90,91,92,93,94,95,96,97,111,],[-21,-22,-23,-24,81,-27,-26,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,-43,]),'LE':([31,32,33,34,52,64,65,88,89,90,91,92,93,94,95,96,97,111,],[-21,-22,-23,-24,82,-27,-26,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,-43,]),'GE':([31,32,33,34,52,64,65,88,89,90,91,92,93,94,95,96,97,111,],[-21,-22,-23,-24,83,-27,-26,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,-43,]),'EQ':([31,32,33,34,52,64,65,88,89,90,91,92,93,94,95,96,97,111,],[-21,-22,-23,-24,84,-27,-26,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,-43,]),'NEQ':([31,32,33,34,52,64,65,88,89,90,91,92,93,94,95,96,97,111,],[-21,-22,-23,-24,85,-27,-26,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,-43,]),')':([31,32,33,34,51,54,64,65,66,88,89,90,91,92,93,94,95,96,97,99,102,103,104,105,106,107,111,],[-21,-22,-23,-24,79,87,-27,-26,96,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,111,-28,-29,-30,-31,-32,-33,-43,]),':':([31,32,33,34,64,65,86,88,89,90,91,92,93,94,95,96,97,111,],[-21,-22,-23,-24,-27,-26,108,-13,-14,-15,-16,-17,-18,-19,-20,-25,-34,-43,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmts_opt':([0,],[2,]),'stmts':([0,6,],[3,16,]),'stmt':([0,3,6,16,79,87,112,113,],[4,15,4,15,101,109,114,115,]),'list':([7,36,98,],[22,68,110,]),'expr':([13,14,17,18,19,20,21,23,24,26,30,35,49,53,56,57,58,59,60,61,62,63,69,71,80,81,82,83,84,85,108,],[29,42,44,45,46,47,48,42,52,52,65,66,77,86,88,89,90,91,92,93,94,95,99,100,102,103,104,105,106,107,112,]),'fun':([13,14,17,18,19,20,21,23,24,26,30,35,49,53,56,57,58,59,60,61,62,63,69,71,80,81,82,83,84,85,108,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'seq':([14,23,],[41,50,]),'cond':([24,26,],[51,54,]),'lists':([36,],[67,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmts_opt','program',1,'p_program','Mparser.py',30),
  ('stmts_opt -> stmts','stmts_opt',1,'p_stmts_opt','Mparser.py',33),
  ('stmts_opt -> <empty>','stmts_opt',0,'p_stmts_opt','Mparser.py',34),
  ('stmts -> stmts stmt','stmts',2,'p_stmts','Mparser.py',37),
  ('stmts -> stmt','stmts',1,'p_stmts','Mparser.py',38),
  ('stmt -> ;','stmt',1,'p_stmt_empty','Mparser.py',41),
  ('stmt -> { stmts }','stmt',3,'p_stmts_grp','Mparser.py',44),
  ('stmt -> ID = expr ;','stmt',4,'p_assignment','Mparser.py',47),
  ('stmt -> ID ADDASSIGN expr ;','stmt',4,'p_assignment','Mparser.py',48),
  ('stmt -> ID SUBASSIGN expr ;','stmt',4,'p_assignment','Mparser.py',49),
  ('stmt -> ID MULASSIGN expr ;','stmt',4,'p_assignment','Mparser.py',50),
  ('stmt -> ID DIVASSIGN expr ;','stmt',4,'p_assignment','Mparser.py',51),
  ('expr -> expr + expr','expr',3,'p_expr_binop','Mparser.py',54),
  ('expr -> expr - expr','expr',3,'p_expr_binop','Mparser.py',55),
  ('expr -> expr * expr','expr',3,'p_expr_binop','Mparser.py',56),
  ('expr -> expr / expr','expr',3,'p_expr_binop','Mparser.py',57),
  ('expr -> expr DOTADD expr','expr',3,'p_expr_binop','Mparser.py',58),
  ('expr -> expr DOTSUB expr','expr',3,'p_expr_binop','Mparser.py',59),
  ('expr -> expr DOTMUL expr','expr',3,'p_expr_binop','Mparser.py',60),
  ('expr -> expr DOTDIV expr','expr',3,'p_expr_binop','Mparser.py',61),
  ('expr -> FLOATNUM','expr',1,'p_expr_lit','Mparser.py',64),
  ('expr -> INTNUM','expr',1,'p_expr_lit','Mparser.py',65),
  ('expr -> ID','expr',1,'p_expr_id','Mparser.py',68),
  ('expr -> STR','expr',1,'p_expr_str','Mparser.py',71),
  ('expr -> ( expr )','expr',3,'p_expr_grp','Mparser.py',74),
  ('expr -> - expr','expr',2,'p_uminus','Mparser.py',77),
  ("expr -> expr '",'expr',2,'p_transpose','Mparser.py',80),
  ('cond -> expr < expr','cond',3,'p_cond','Mparser.py',83),
  ('cond -> expr > expr','cond',3,'p_cond','Mparser.py',84),
  ('cond -> expr LE expr','cond',3,'p_cond','Mparser.py',85),
  ('cond -> expr GE expr','cond',3,'p_cond','Mparser.py',86),
  ('cond -> expr EQ expr','cond',3,'p_cond','Mparser.py',87),
  ('cond -> expr NEQ expr','cond',3,'p_cond','Mparser.py',88),
  ('expr -> [ lists ]','expr',3,'p_literal_matrix','Mparser.py',91),
  ('lists -> list','lists',1,'p_lists','Mparser.py',94),
  ('lists -> lists , list','lists',3,'p_lists','Mparser.py',95),
  ('list -> [ seq ]','list',3,'p_list','Mparser.py',98),
  ('seq -> expr','seq',1,'p_seq','Mparser.py',101),
  ('seq -> seq , expr','seq',3,'p_seq','Mparser.py',102),
  ('fun -> ZEROS','fun',1,'p_fun','Mparser.py',105),
  ('fun -> EYE','fun',1,'p_fun','Mparser.py',106),
  ('fun -> ONES','fun',1,'p_fun','Mparser.py',107),
  ('expr -> fun ( expr )','expr',4,'p_funcall','Mparser.py',110),
  ('stmt -> WHILE ( cond ) stmt','stmt',5,'p_while','Mparser.py',113),
  ('stmt -> FOR ID = expr : expr stmt','stmt',7,'p_for','Mparser.py',116),
  ('stmt -> IF ( cond ) stmt','stmt',5,'p_if','Mparser.py',119),
  ('stmt -> IF ( cond ) stmt ELSE stmt','stmt',7,'p_if','Mparser.py',120),
  ('stmt -> BREAK ;','stmt',2,'p_control','Mparser.py',123),
  ('stmt -> CONTINUE ;','stmt',2,'p_control','Mparser.py',124),
  ('stmt -> RETURN expr ;','stmt',3,'p_control','Mparser.py',125),
  ('stmt -> PRINT seq ;','stmt',3,'p_print','Mparser.py',128),
  ('stmt -> ID list = expr','stmt',4,'p_access','Mparser.py',131),
]
